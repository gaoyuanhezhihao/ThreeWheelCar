C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FLASHTESTMAIN
OBJECT MODULE PLACED IN FlashTestMain.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE FlashTestMain.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F12x_UART0_Interrupt.c
   3          //-----------------------------------------------------------------------------
   4          // ????????????? RJ ?? ???????
   5          // ???????:     http://dadastudio.taobao.com/ 
   6          // ????????      C8051F12x-13x???.pdf ?? 21 ?:UART0
   7          //
   8          // Copyright 2006 Silicon Laboratories, Inc.
   9          // http://www.silabs.com
  10          //
  11          // Program Description:
  12          //
  13          // This program demonstrates how to configure the C8051F120 to write to and read 
  14          // from the UART interface. The program reads a word using the UART0 interrupts 
  15          // and outputs that word to the screen, with all characters in uppercase
  16          //
  17          // How To Test:
  18          //
  19          // 1) Download code to a 'F12x device that is connected to a UART transceiver
  20          // 2) Verify jumpers J6 and J9 are populated on the 'F12x TB.
  21          // 3) Connect serial cable from the transceiver to a PC
  22          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  23          //    to the COM port at <BAUDRATE> and 8-N-1
  24          // 5) Download and execute code on an 'F12x target board.
  25          // 6) Type up to 64 characters into the Terminal and press Enter.  The MCU 
  26          //    will then print back the characters that were typed
  27          //   
  28          //
  29          // Target:         C8051F12x
  30          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  31          // Command Line:   None
  32          //
  33          // Release 1.0
  34          //    -Initial Revision (SM)
  35          //    -11 JULY 2007
  36          //
  37          //       P5.0-->PWMHigelevel bit0
  38          //       P5.1-->PWMHigelevel bit1
  39          //       P5.2-->PWMHigelevel bit2
  40          //       P5.3-->PWMHigelevel bit3
  41          //   P5.4-->PWMHigelevel bit4
  42          //       P5.5-->PWMHigelevel bit5
  43          //   P5.6-->PWMHigelevel bit6
  44          //       P5.7-->PWMHigelevel bit7
  45          //       P4.6-->PWMHigelevel bit8
  46          //       P4.7-->PWMHigelevel bit9
  47          //       P4.0-->cPWM1ChangeOrder
  48          //   P4.1-->cPWM2ChangeOrder
  49          
  50          //-----------------------------------------------------------------------------
  51          // Includes
  52          //-----------------------------------------------------------------------------
  53          
  54          #include <c8051f120.h>                 // SFR declarations
  55          #include <stdio.h>                     
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 2   

  56          #include <string.h>
  57          #include <F120_FlashPrimitives.h>
  58          #include <math.h>
  59          #include "MyDebug.h"
  60          //-----------------------------------------------------------------------------
  61          // 16-bit SFR Definitions for 'F12x
  62          //-----------------------------------------------------------------------------
  63          
  64          sfr16 RCAP2    = 0xca;                 // Timer2 capture/reload
  65          sfr16 TMR2     = 0xcc;                 // Timer2
  66          
  67          //-----------------------------------------------------------------------------
  68          // Global Constants
  69          //-----------------------------------------------------------------------------
  70          
  71          #define BAUDRATE     9600            // Baud rate of UART in bps
  72          #define UART1BAUDRATE 115200             
  73          #define Const_Control_Time      10                      //ADC cycle = Const_Control_Time*Timer0 cycle = 10*10ms=100ms
  74          sbit PWM1       =       P3^2;                      
  75          sbit IN11               =       P6^5;
  76          sbit IN12               =       P6^6;
  77          sbit TMR3Debug  =   P3^5;
  78          sbit SET                =       P3^1;
  79          sbit Key1               =       P7^2;
  80          sbit PWM3               =       P6^7;
  81          sbit IN31               =       P6^4;
  82          sbit IN32               =       P6^3;
  83          sbit DEBUGPORT  =   P3^0;
  84          sbit PWM1CHANGEORDER = P4^0;
  85          sbit PWM2CHANGEORDER = P4^1;
  86          sbit PWMDEGREE_HighBit0=P4^6;
  87          sbit PWMDEGREE_HighBit1=P4^7;
  88          // SYSTEMCLOCK = System clock frequency in Hz
  89          #define SYSTEMCLOCK       (22118400L * 9 / 4)
  90          #define TIMER0CLOCK                     (SYSTEMCLOCK/48)
  91          #define TIMER1CLOCK             (SYSTEMCLOCK/48)
  92          #define TIMER3CLOCK                     (SYSTEMCLOCK/48)
  93          #define MAP_ADC_ANGEL_SIZE  13
  94          #define UART_BUFFERSIZE 64
  95          #define UART1_BUFFERSIZE 22
  96          #define PWMDEGREE_Low8Bits P5
  97          
  98          
  99          //--------------------------------POSE & Control-------------------------------------------
 100          #define MAX_PWM 800
 101          #define ANGELRANGE_SIZE 7
 102          #define ANGELSCALE_10 0xF8E3  //-10
 103          #define ANGELSCALE_5 0xFC71  //-5
 104          #define ANGELSCALE_3 0xFDDD  //-3
 105          #define ANGELSCALE0  0x0000  //0
 106          #define ANGELSCALE3  0x0222  //3
 107          #define ANGELSCALE5  0x038E  //5
 108          #define ANGELSCALE10  0x071C  //10
 109          //-----------------------------------------------------------------------------
 110          // Function Prototypes
 111          //-----------------------------------------------------------------------------
 112          
 113          void OSCILLATOR_Init (void);         
 114          void PORT_Init (void);
 115          void UART0_Init (void);
 116          void RerangeTheBufferQueue(unsigned char IndexOfBuffer);
 117          void WirelessModule_Init(void);
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 3   

 118          void Uart0_SendByte(unsigned char value);
 119          void Uart0_TransmitString(unsigned char * pucString , int iStringSize );
 120          void TIMER0_Init(void);
 121          void TIMER1_Init(unsigned int count);
 122          void Calibration(void);
 123          void Delay_ms(unsigned int count);
 124          void Regulate(void);
 125          void FLASH_ByteWrite (FLADDR addr, char byte, bit SFLE);
 126          unsigned char FLASH_ByteRead (FLADDR addr, bit SFLE);
 127          void FLASH_PageErase (FLADDR addr, bit SFLE);
 128          void SaveMapToFlash(void);
 129          void RestoreMapFromFlash(void);
 130          void TIMER3_Init(void);
 131          void UART1_Init (void);
 132          void Uart1_SendByte(unsigned char value);
 133          void PWMChange(void);
 134          void TouchKeepAlive(void);
 135          void Acknowledge(unsigned char back);
 136          void LostConnect(void);
 137          //-----------------------------------------------------------------------------
 138          // Global Variables
 139          //-----------------------------------------------------------------------------
 140          
 141          //-------------------------------UART0-----------------------------------------
 142          unsigned int UART0_Receive_Buffer_Size = 0;
 143          unsigned char UART_Receive_Buffer_Queue[UART_BUFFERSIZE]={0};
 144          unsigned char * UART_Receive_Buffer_QueueHead=UART_Receive_Buffer_Queue;
 145          unsigned char * UART_Receive_Buffer_QueueBottom=UART_Receive_Buffer_Queue;
 146          unsigned char UART_Transmit_Buffer_Queue[UART_BUFFERSIZE];
 147          unsigned char * UART_Transmit_Buffer_QueueHead=UART_Transmit_Buffer_Queue;
 148          unsigned char * UART_Transmit_Buffer_QueueBottom=UART_Transmit_Buffer_Queue;
 149          unsigned char TX_Ready =1;
 150          static   char Byte;
 151                           char Rcv_New=0;
 152          //--------------------------------UART1-----------------------------------------
 153          unsigned char   Counter_UART1 = 0;
 154          unsigned char   Flag_NewFrame = 0;
 155          unsigned char   UART1_Receive_Buffer_Queue[UART1_BUFFERSIZE]={0};
 156          unsigned char * UART1_Receive_Buffer_QueueHead   = UART1_Receive_Buffer_Queue;
 157          unsigned char * UART1_Receive_Buffer_QueueBottom  = UART1_Receive_Buffer_Queue;
 158          
 159          
 160          //--------------------------------POSE & Control-------------------------------------------
 161          int a,angle,Temp,w;
 162          int ZeroPoint_a,ZeroPoint_w,ZeroPoint_angle,ZeroPoint_Temp;
 163          int iDeviation = 0;
 164          unsigned int uiAbsoluteDeviation =  0;
 165          unsigned int AbsoluteW_ui = 0;
 166          int iStablePoint = 0;
 167          bit RotateDirection = 0;
 168          
 169          int iAngleRange[] = 0;
 170          struct Pair_Angel_Control{
 171                  int Angel;
 172                  int Kp;
 173                  int Ki;
 174                  int Kd;
 175          };
 176          struct Pair_Angel_Control Map_Angel_PID[ANGELRANGE_SIZE] = {{ANGELSCALE_10,5,0,1},\
 177                                                                                                                                          {ANGELSCALE_5,4,0,1},\
 178                                                                                                                                          {ANGELSCALE_3,3,0,1},\
 179                                                                                                                                          {ANGELSCALE0,1,0,1},\
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 4   

 180                                                                                                                                          {ANGELSCALE3,2,0,1},\
 181                                                                                                                                          {ANGELSCALE5,3,0,1},\
 182                                                                                                                                          {ANGELSCALE10,5,0,1}};
 183          int iCurrentKey = 0;
 184          unsigned int KeepAliveTime_i=0;
 185                                                                                  
 186          //-------------------------------Motor--------------------------------
 187          unsigned int Motor1_Time=0;
 188          unsigned int Motor2_Time=0;
 189          
 190          unsigned int PWM1_HighLevelCount=0;
 191          unsigned int PWM1_LowLevelCount=0;
 192          float fPWM1_HighLevelPercent = 0.5f;
 193          bit pwm1_flag=0;
 194          
 195          unsigned int PWM3_HighLevelCount=0;
 196          unsigned int PWM3_LowLevelCount=0;
 197          float fPWM3_HighLevelPercent = 0.9f;
 198          bit pwm3_flag=0;
 199          
 200          unsigned char TH1_HighLevelPrefetch = 0;
 201          unsigned char TL1_HighLevelPrefetch = 0;
 202          unsigned char TMRH3_HighLevelPrefetch = 0;
 203          unsigned char TMRL3_HighLevelPrefetch = 0;
 204          
 205          unsigned char TH1_LowLevelPrefetch = 0;
 206          unsigned char TL1_LowLevelPrefetch = 0;
 207          unsigned char TMRH3_LowLevelPrefetch = 0;
 208          unsigned char TMRL3_LowLevelPrefetch = 0;
 209          
 210          unsigned int uiPWM1Degree=0;
 211          unsigned int uiPWM2Degree=0;
 212          bit     PWM1ChangeOrder = 0;
 213          bit     PWM2ChangeOrder = 0;
 214          
 215          char cOldRotateDirection = 0;
 216          //-------------------------------System--------------------------------
 217          char data Global_SFRPAGE_SAVE;
 218          //unsigned int i=0;
 219          char cDebugTmp=0;
 220          char Control_TimeIsUp = 0;
 221          unsigned char Control_Time=0;
 222          
 223          
 224          unsigned char TH0_Prefetch = 0;
 225          unsigned char TL0_Prefetch = 0;
 226          
 227          
 228          
 229          //-----------------------------------------------------------------------------
 230          // main() Routine
 231          //-----------------------------------------------------------------------------
 232          
 233          void main (void)
 234          {
 235   1      
 236   1              //Initialization
 237   1              SFRPAGE = CONFIG_PAGE;
 238   1              WDTCN = 0xDE;                       // Disable watchdog timer
 239   1              WDTCN = 0xAD;
 240   1              OSCILLATOR_Init();  
 241   1              PORT_Init();                       // Initialize crossbar and GPIO
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 5   

 242   1              UART0_Init();                      // Initialize UART0
 243   1      //      UART1_Init();
 244   1              WirelessModule_Init();
 245   1              TIMER0_Init();
 246   1      //      TIMER3_Init();
 247   1              EA = 1;
 248   1      
 249   1              //*************flash test**********************
 250   1      //      FLASH_PageErase(0x8000,1);
 251   1      //      for(i=0;i<MAP_ADC_ANGEL_SIZE;i++)
 252   1      //      {
 253   1      //              Map_ADC_Angel_array[i].ADC = i;
 254   1      //              Map_ADC_Angel_array[i].Angel = -i;
 255   1      //      }
 256   1      //      SaveMapToFlash();
 257   1      //      FLASH_PageErase(0x8000,1);
 258   1      //      FLASH_ByteWrite(0x8000,'j',1);
 259   1      //      FLASH_ByteWrite(0x8001,'a',1);
 260   1      //      cReadFlash = FLASH_ByteRead(0x8000,1);
 261   1      ////*******************PWM test******************
 262   1      //      uiPWM1Degree = 0;
 263   1      //      while(1)
 264   1      //      {
 265   1      //              uiPWM1Degree +=50;
 266   1      //              PWMChange(1);
 267   1      //              PWMChange(2);
 268   1      //      }
 269   1      ////-------------------PWM test------------------
 270   1              
 271   1              
 272   1      
 273   1      
 274   1              Uart0_TransmitString("Ready",strlen("Ready"));
 275   1              while (1)
 276   1              {
 277   2                      //if more than 20*50ms=1000ms is past since last message.
 278   2                      if(KeepAliveTime_i > 100)
 279   2                      {
 280   3                              LostConnect();
 281   3                      }
 282   2                      if(UART_Receive_Buffer_QueueHead < UART_Receive_Buffer_QueueBottom)
 283   2                      {
 284   3                              //Uart0_SendByte(*UART_Receive_Buffer_Queue);
 285   3                              //++UART_Receive_Buffer_Queue;
 286   3                              if( 0x53 == *UART_Receive_Buffer_QueueHead )
 287   3                              {
 288   4                                      char WaitFailSign = 0;
 289   4                                      ++UART_Receive_Buffer_QueueHead;
 290   4                                      while( UART_Receive_Buffer_QueueBottom - UART_Receive_Buffer_QueueHead < 3 )
 291   4                                      {
 292   5                                              //wait the rest three char
 293   5                                              if(KeepAliveTime_i > 100)
 294   5                                              {
 295   6                                                      //wait too long 
 296   6                                                      WaitFailSign = 1;
 297   6                                                      break;
 298   6                                              }
 299   5                                      }
 300   4                                      if(WaitFailSign == 1) 
 301   4                                      {
 302   5                                              //wait too long. Abort this frame. 
 303   5                                              UART_Receive_Buffer_QueueHead = UART_Receive_Buffer_QueueHead;
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 6   

 304   5                                              break;
 305   5                                      }
 306   4                                      
 307   4                                      //check the sum 
 308   4                                      if( *UART_Receive_Buffer_QueueHead + *(UART_Receive_Buffer_QueueHead+1) != *(UART_Receive_Buffer_Queue
             -Head+2) )
 309   4                                      {
 310   5                                              /*debug*/
 311   5                                              Uart0_SendByte('w');
 312   5                                              UART_Receive_Buffer_QueueHead+=3;
 313   5                                              /*debug end*/
 314   5                                              continue;
 315   5                                      }
 316   4                                      
 317   4                                      
 318   4                                      
 319   4                                      //next char (order) come
 320   4                                      switch(*UART_Receive_Buffer_QueueHead)
 321   4                                      {
 322   5                                              case 'g'://start the car
 323   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1) * 100;
 324   5                                                      PWMChange();
 325   5                                                      IN11=1;
 326   5                                                      IN12=0;
 327   5                                                      IN31=1;
 328   5                                                      IN32=0;
 329   5                                                      TouchKeepAlive();
 330   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 331   5                                                      break;
 332   5                                              case 'f'://forward
 333   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1) * 100;
 334   5                                                      PWMChange();                                            
 335   5                                                      IN11=1;
 336   5                                                      IN12=0;
 337   5                                                      IN31=1;
 338   5                                                      IN32=0;
 339   5                                                      TouchKeepAlive();
 340   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 341   5                                                      break;
 342   5                                              case 'l'://turn left
 343   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1) * 100;
 344   5                                                      PWMChange();                                            
 345   5                                                      IN11=0;
 346   5                                                      IN12=0;
 347   5                                                      IN31=1;
 348   5                                                      IN32=0;
 349   5                                                      TouchKeepAlive();
 350   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 351   5                                                      break;
 352   5                                              case 'r'://turn right
 353   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1) * 100;
 354   5                                                      PWMChange();                                            
 355   5      
 356   5                                                      IN11=1;
 357   5                                                      IN12=0;
 358   5                                                      IN31=0;
 359   5                                                      IN32=0;
 360   5                                                      TouchKeepAlive();
 361   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 362   5                                                      break;
 363   5                                              case 'b'://go back
 364   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1) * 100;
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 7   

 365   5                                                      PWMChange();
 366   5                                                      IN11=0;
 367   5                                                      IN12=1;
 368   5                                                      IN31=0;
 369   5                                                      IN32=1;
 370   5                                                      TouchKeepAlive();
 371   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 372   5                                                      break;
 373   5                                              case 's'://stop
 374   5                                                      uiPWM1Degree=uiPWM2Degree=0;
 375   5                                                      PWMChange();
 376   5                                                      IN11=0;
 377   5                                                      IN12=0;
 378   5                                                      IN31=0;
 379   5                                                      IN32=0;
 380   5                                                      TouchKeepAlive();
 381   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 382   5                                                      break;
 383   5                                              default:
 384   5                                                      /*debug*/
 385   5                                                      Acknowledge('n');//No such order
 386   5                                                      /*debug end*/
 387   5                                                      break;                                          
 388   5                                      }
 389   4                                      UART_Receive_Buffer_QueueHead+=3;
 390   4                              }
 391   3                              else
 392   3                              {
 393   4                                      ++UART_Receive_Buffer_QueueHead;
 394   4                              }
 395   3                              
 396   3                      }       
 397   2              }
 398   1      }
 399          
 400          //-----------------------------------------------------------------------------
 401          // Initialization Subroutines
 402          //-----------------------------------------------------------------------------
 403          
 404          //-----------------------------------------------------------------------------
 405          // OSCILLATOR_Init
 406          //-----------------------------------------------------------------------------
 407          //
 408          // Return Value : None
 409          // Parameters   : None
 410          //
 411          // This function initializes the system clock to use the PLL as its clock
 412          // source, where the PLL multiplies the external 22.1184MHz crystal by 9/4.
 413          //
 414          //-----------------------------------------------------------------------------
 415          void OSCILLATOR_Init (void)
 416          {
 417   1         int i=0;                              // Software timer
 418   1      
 419   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 420   1      
 421   1         SFRPAGE = CONFIG_PAGE;              // Set SFR page
 422   1      
 423   1         OSCICN = 0x80;                      // Set internal oscillator to run
 424   1                                             // at its slowest frequency
 425   1      
 426   1         CLKSEL = 0x00;                      // Select the internal osc. as
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 8   

 427   1                                             // the SYSTEMCLOCK source
 428   1      
 429   1         // Initialize external crystal oscillator to use 22.1184 MHz crystal
 430   1      
 431   1         OSCXCN = 0x67;                      // Enable external crystal osc.
 432   1          for(i=0; i < 256; ) // Wait at least 1ms
 433   1              {
 434   2                      i++;
 435   2              }
 436   1         while (!(OSCXCN & 0x80));           // Wait for crystal osc to settle
 437   1      
 438   1         SFRPAGE = LEGACY_PAGE;
 439   1         FLSCL |=  0x30;                     // Initially set FLASH read timing for
 440   1                                             // 100MHz SYSTEMCLOCK (most conservative
 441   1                                             // setting)
 442   1         if (SYSTEMCLOCK <= 25000000L) {           
 443   2         // Set FLASH read timing for <=25MHz
 444   2            FLSCL &= ~0x30;
 445   2         } else if (SYSTEMCLOCK <= 50000000L) {    
 446   2         // Set FLASH read timing for <=50MHz
 447   2            FLSCL &= ~0x20;
 448   2         } else if (SYSTEMCLOCK <= 75000000L) {    
 449   2         // Set FLASH read timing for <=75MHz
 450   2            FLSCL &= ~0x10;
 451   2         } else {                            // set FLASH read timing for <=100MHz
 452   2            FLSCL &= ~0x00;
 453   2         }
 454   1      
 455   1         // Start PLL for 50MHz operation
 456   1         SFRPAGE = PLL0_PAGE;
 457   1         PLL0CN = 0x04;                      // Select EXTOSC as clk source
 458   1         PLL0CN |= 0x01;                     // Enable PLL power
 459   1         PLL0DIV = 0x04;                     // Divide by 4
 460   1         PLL0FLT &= ~0x0f;
 461   1         PLL0FLT |=  0x0f;                   // Set Loop Filt for (22/4)MHz input clock
 462   1         PLL0FLT &= ~0x30;                   // Set ICO for 30-60MHz
 463   1         PLL0FLT |=  0x10;
 464   1      
 465   1         PLL0MUL = 0x09;                     // Multiply by 9
 466   1      
 467   1         // wait at least 5us
 468   1         for (i = 0; i < 256; )
 469   1         {
 470   2                 i++;
 471   2         }
 472   1      
 473   1         PLL0CN |= 0x02;                     // Enable PLL
 474   1      
 475   1         while (PLL0CN & 0x10 == 0x00);      // Wait for PLL to lock
 476   1      
 477   1         SFRPAGE = CONFIG_PAGE;
 478   1      
 479   1         CLKSEL = 0x02;                      // Select PLL as SYSTEMCLOCK source
 480   1      
 481   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 482   1      }
 483          
 484          //-----------------------------------------------------------------------------
 485          // PORT_Init
 486          //-----------------------------------------------------------------------------
 487          //
 488          // Return Value : None
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 9   

 489          // Parameters   : None
 490          //
 491          // This function configures the crossbar and GPIO ports.
 492          //
 493          // P0.0   digital   push-pull     UART TX
 494          // P0.1   digital   open-drain    UART RX
 495          //-----------------------------------------------------------------------------
 496          void PORT_Init (void)
 497          {
 498   1              char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 499   1      
 500   1              SFRPAGE = CONFIG_PAGE;              // Set SFR page
 501   1      
 502   1              XBR0     = 0x04;                    // Enable UART0
 503   1      //      XBR0    |= 0x08;                     // Route CEX0 to P0.2
 504   1              
 505   1              XBR1     = 0x20;                                        //Enable T2
 506   1              XBR2     = 0x40;                    // Enable crossbar and weak pull-up
 507   1              XBR2    |= 0X08;
 508   1              XBR2    |= 0x04;                                        //Enable UART1
 509   1       //   P1MDIN   = 0xFF;                                   
 510   1              P0MDOUT |= 0x04;                    // Set CEX0 (P0.2) to push-pull
 511   1              P0MDOUT |= 0x01;                    // Set TX pin to push-pull
 512   1              P0MDOUT |= 0x04;                                        //Set UART1 TX pin to push-pull
 513   1      
 514   1              P3MDOUT = 0x18;                                         // P3.3 P3.4 is  push-pull
 515   1      //      P6MDOUT = 0x60;                                         // P6.x is push-pull
 516   1              P6              &= ~0x80;
 517   1              P6MDOUT = 0xFF;
 518   1              P5MDOUT = 0xFF;                                         //P6 is push-pull
 519   1              P4MDOUT = 0xC3;                                         //P4.7,4.6,4.0,4.1 is push-pull
 520   1      //      P7MDOUT = 0x00;                                         //P7.x is  open-drain
 521   1              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 522   1      }
 523          
 524          //-----------------------------------------------------------------------------
 525          // TIMER0_Init
 526          //-----------------------------------------------------------------------------
 527          //
 528          //
 529          //-----------------------------------------------------------------------------
 530          void TIMER0_Init(void)
 531          {
 532   1      
 533   1              char data SFRPAGE_SAVE =SFRPAGE;
 534   1              SFRPAGE=TIMER01_PAGE;
 535   1              TCON &= ~0x30;//stop the timer0
 536   1              TMOD &= ~0x00;//Set the timer0 work in mode of hex
 537   1              TMOD |= 0x01;
 538   1              CKCON &= 0xf0;
 539   1              CKCON |= 0x02;
 540   1              CKCON &= ~0x08;//Timer 0 uses the clock defined by the prescale bits
 541   1              TR0 = 0;
 542   1              TH0= (0xFFFF-TIMER0CLOCK/20)>>8; //Timer0 cycle = 50ms
 543   1              TL0=  0xFFFF-TIMER0CLOCK/20;
 544   1              ET0 = 1;//Enable interrupt
 545   1              TR0 = 1;//Run Timer0
 546   1              SFRPAGE = SFRPAGE_SAVE;
 547   1      }
 548          
 549          //-----------------------------------------------------------------------------
 550          // TIMER1_Init
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 10  

 551          //-----------------------------------------------------------------------------
 552          //
 553          // Return Value : None
 554          // Parameters   :
 555          //   1)  int counts - calculated Timer overflow rate
 556          //                    range is postive range of integer: 0 to 32767
 557          //
 558          // Configure Timer1 to auto-reload at interval specified by <counts> (no
 559          // interrupt generated) using SYSCLK as its time base.
 560          //
 561          //-----------------------------------------------------------------------------
 562          //void TIMER1_Init(unsigned int count)
 563          //{
 564          //      char data SFRPAGE_SAVE =SFRPAGE;
 565          //      PWM1_HighLevelCount = count * fPWM1_HighLevelPercent;
 566          //      PWM1_LowLevelCount = (float)count * (1-fPWM1_HighLevelPercent);
 567          //      SFRPAGE=TIMER01_PAGE;
 568          //      TCON &= ~0xC0;//stop the timer1
 569          //      TMOD &= ~0x00;//Set the timer1 work in mode of hex
 570          //      TMOD |= 0x10;
 571          //      
 572          //      CKCON &=0x0f;//clear CKCON bit4~7
 573          //      CKCON |= 0x10;//Timer 1 use SYSTEMCLOCK
 574          //      
 575          //      TH1_HighLevelPrefetch = ( 0xffff - (unsigned int) (count * fPWM1_HighLevelPercent) )>>8;
 576          //      TL1_HighLevelPrefetch =   0xffff - (unsigned int) (count * fPWM1_HighLevelPercent) ;
 577          //      TH1_LowLevelPrefetch = (  0xffff - (unsigned int )( count * (1-fPWM1_HighLevelPercent) )  )>>8;
 578          //      TL1_LowLevelPrefetch =    0xffff - (unsigned int) (count * (1-fPWM1_HighLevelPercent));
 579          //      ET1 = 1;//Enable interrupt;
 580          //      TCON |= 0xC0;//start the timer1
 581          //      
 582          //      SFRPAGE = SFRPAGE_SAVE;
 583          //}
 584          
 585          //-----------------------------------------------------------------------------
 586          // TIMER3_Init
 587          //-----------------------------------------------------------------------------
 588          //
 589          //-----------------------------------------------------------------------------
 590          //void TIMER3_Init(void)
 591          //{
 592          //      char data SFRPAGE_SAVE =SFRPAGE;
 593          ////    PWM3_HighLevelCount = count * fPWM3_HighLevelPercent;
 594          ////    PWM3_LowLevelCount = (float)count * (1-fPWM3_HighLevelPercent);
 595          //      SFRPAGE=TMR3_PAGE;
 596          //      TMR3CN &= ~0x04;//stop the timer3
 597          //      TMR3CN &= ~0x01;//Auto-Reload Mode 
 598          //      TMR3CF &= ~0x18;//clear bit4 ,3.clock = SYSCLK/12
 599          //      
 600          //      RCAP3H = (0xFFFF-TIMER0CLOCK/20)>>8; //Timer3 cycle = 10ms
 601          //      RCAP3L =  0xFFFF-TIMER0CLOCK/20;
 602          ////    TMRH3_HighLevelPrefetch = ( 0xffff - (unsigned int) (count * fPWM3_HighLevelPercent) )>>8;
 603          ////    TMRL3_HighLevelPrefetch =   0xffff - (unsigned int) (count * fPWM3_HighLevelPercent) ;
 604          ////    TMRH3_LowLevelPrefetch = (  0xffff - (unsigned int )( count * (1-fPWM3_HighLevelPercent) )  )>>8;
 605          ////    TMRL3_LowLevelPrefetch =  0xffff - (unsigned int) (count * (1-fPWM3_HighLevelPercent));
 606          //      
 607          //      EIE2 |= 0x01;//Enable TIMER3 interrupt;
 608          //      TMR3CN |= 0x04;//start the timer3
 609          //      SFRPAGE = SFRPAGE_SAVE;
 610          //}
 611          void Timer3_ISR(void) interrupt 14
 612          {
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 11  

 613   1              char data SFRPAGE_SAVE =SFRPAGE;//Save current SFP page
 614   1              SFRPAGE = TMR3_PAGE;
 615   1              TMR3Debug = ~TMR3Debug;
 616   1      
 617   1              
 618   1              if( Control_Time == 0 )
 619   1              {
 620   2                      Control_Time = Const_Control_Time;
 621   2                      Control_TimeIsUp=1;
 622   2      //              /***************Debug Begin***********************/
 623   2      //              IN31 ^= 1;
 624   2      //              //---------------Debug End ---------------------------
 625   2              }
 626   1              else
 627   1              {
 628   2                      Control_Time--;
 629   2              }
 630   1              TMR3CN &= ~0x80;//clear interrupt flag
 631   1              SFRPAGE=Global_SFRPAGE_SAVE;
 632   1              SFRPAGE = SFRPAGE_SAVE;
 633   1      }
 634          
 635          //-----------------------------------------------------------------------------
 636          // UART0_Init   Variable baud rate, Timer 2, 8-N-1
 637          //-----------------------------------------------------------------------------
 638          //
 639          // Return Value : None
 640          // Parameters   : None
 641          //
 642          // Configure UART0 for operation at <baudrate> 8-N-1 using Timer2 as
 643          // baud rate source.
 644          //
 645          //-----------------------------------------------------------------------------
 646          void UART0_Init (void)
 647          {
 648   1         char SFRPAGE_SAVE;
 649   1      
 650   1         SFRPAGE_SAVE = SFRPAGE;             // Preserve SFRPAGE
 651   1      
 652   1         SFRPAGE = TMR2_PAGE;
 653   1      
 654   1         TMR2CN = 0x00;                      // Timer in 16-bit auto-reload up timer
 655   1                                             // mode
 656   1         TMR2CF = 0x08;                      // SYSCLK is time base; no output;
 657   1                                             // up count only
 658   1         RCAP2 = - ((long) SYSTEMCLOCK/BAUDRATE/16);
 659   1         TMR2 = RCAP2;
 660   1         TR2= 1;                             // Start Timer2
 661   1      
 662   1         SFRPAGE = UART0_PAGE;
 663   1      
 664   1         SCON0 = 0x50;                       // 8-bit variable baud rate;
 665   1                                             // 9th bit ignored; RX enabled
 666   1                                             // clear all flags
 667   1         SSTA0 = 0x15;                       // Clear all flags; enable baud rate
 668   1                                             // doubler (not relevant for these
 669   1                                             // timers);
 670   1                                             // Use Timer2 as RX and TX baud rate
 671   1                                             // source;
 672   1         ES0 = 1;  
 673   1         IP |= 0x10;
 674   1      
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 12  

 675   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 676   1      }
 677          
 678          
 679          //-----------------------------------------------------------------------------
 680          // Interrupt Service Routines
 681          //-----------------------------------------------------------------------------
 682          
 683          //-----------------------------------------------------------------------------
 684          // Timer0_ISR
 685          //-----------------------------------------------------------------------------
 686          //
 687          //
 688          //-----------------------------------------------------------------------------
 689          void Timer0_ISR(void) interrupt 1
 690          {       
 691   1              Global_SFRPAGE_SAVE=SFRPAGE;//Save current SFP page
 692   1              SFRPAGE=CONFIG_PAGE;
 693   1              KeepAliveTime_i++;
 694   1              
 695   1              TF0=0;
 696   1              SFRPAGE=Global_SFRPAGE_SAVE;
 697   1      }
 698          //-----------------------------------------------------------------------------
 699          // Timer1_ISR
 700          //-----------------------------------------------------------------------------
 701          //
 702          //
 703          //-----------------------------------------------------------------------------
 704          //void Timer1_ISR(void) interrupt 3
 705          //{
 706          //      char data SFRPAGE_SAVE =SFRPAGE;//Save current SFP page
 707          //      if(!pwm1_flag)
 708          //      {
 709          //                      
 710          //              //Start of High level
 711          //                      pwm1_flag = 1;  //Set flag
 712          //                      SFRPAGE=CONFIG_PAGE;
 713          //                      PWM1 = 1;       //Set PWM o/p pin
 714          //                      
 715          //                      TH1 = TH1_HighLevelPrefetch;    //Load timer
 716          //                      TL1 = TL1_HighLevelPrefetch;
 717          //                      TF0 = 0;                //Clear interrupt flag
 718          //                      SFRPAGE=SFRPAGE_SAVE;
 719          //                      return;         //Return
 720          //      }
 721          //      else
 722          //      {       //Start of Low level
 723          //              pwm1_flag = 0;  //Clear flag
 724          //              SFRPAGE=CONFIG_PAGE;
 725          //              PWM1 = 0;       //Clear PWM o/p pin
 726          //              
 727          //              TH1 = TH1_LowLevelPrefetch;     //Load timer
 728          //              TL1 = TL1_LowLevelPrefetch;
 729          //              TF0 = 0;        //Clear Interrupt flag
 730          //              
 731          //              SFRPAGE=SFRPAGE_SAVE;
 732          //              return;         //return
 733          //      }
 734          //}
 735          
 736          //void Timer3_ISR(void) interrupt 14
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 13  

 737          //{
 738          //      char data SFRPAGE_SAVE =SFRPAGE;//Save current SFP page
 739          //      if(!pwm3_flag)
 740          //      {
 741          //                      
 742          //              //Start of High level
 743          //                      pwm3_flag = 1;  //Set flag
 744          //                      SFRPAGE = CONFIG_PAGE;
 745          //                      PWM3 = 1;       //Set PWM o/p pin
 746          //              
 747          //                      SFRPAGE = TMR3_PAGE;
 748          //                      TMR3H = TMRH3_HighLevelPrefetch;        //Load timer
 749          //                      TMR3L = TMRL3_HighLevelPrefetch;
 750          //                                              
 751          //                      TF3 = 0;                //Clear interrupt flag
 752          //              
 753          //                      SFRPAGE = SFRPAGE_SAVE;
 754          //                      return;
 755          //      }
 756          //      else
 757          //      {       //Start of Low level
 758          //              pwm3_flag = 0;  //Clear flag
 759          //              
 760          //              SFRPAGE = CONFIG_PAGE;
 761          //              PWM3 = 0;       //Set PWM o/p pin
 762          //              
 763          //              SFRPAGE = TMR3_PAGE;
 764          //              TMR3H = TMRH3_LowLevelPrefetch; //Load timer
 765          //              TMR3L = TMRL3_LowLevelPrefetch;
 766          //              
 767          //              
 768          //              TF3 = 0;        //Clear Interrupt flag
 769          //              
 770          //              SFRPAGE = SFRPAGE_SAVE;
 771          //              return; 
 772          //      }
 773          //}
 774          //-----------------------------------------------------------------------------
 775          // UART0_Interrupt
 776          //-----------------------------------------------------------------------------
 777          //
 778          // This routine is invoked whenever a character is entered or displayed on the
 779          // Hyperterminal.
 780          //
 781          //-----------------------------------------------------------------------------
 782          
 783          void UART0_Interrupt (void) interrupt 4
 784          {
 785   1         SFRPAGE = UART0_PAGE;
 786   1      
 787   1         if ( RI0 == 1 ) //if the buffer is not full
 788   1         {
 789   2            
 790   2                      Byte = SBUF0;                      // Read a character from UART
 791   2                      //if the buffer is't full
 792   2                  if(  (UART_Receive_Buffer_QueueBottom-UART_Receive_Buffer_QueueHead) < UART_BUFFERSIZE )
 793   2                  {
 794   3                          if ( UART_Receive_Buffer_QueueBottom < (UART_Receive_Buffer_Queue+UART_BUFFERSIZE) )
 795   3                              {
 796   4                                      *UART_Receive_Buffer_QueueBottom = Byte; // Store in array
 797   4                                      UART_Receive_Buffer_QueueBottom++;
 798   4                                      if( UART_Receive_Buffer_QueueBottom >= (UART_Receive_Buffer_Queue+UART_BUFFERSIZE) )
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 14  

 799   4                                              RerangeTheBufferQueue('r');
 800   4                                      Rcv_New=1;//Notice new message come
 801   4                                      UART0_Receive_Buffer_Size++;
 802   4                              }
 803   3                              else
 804   3                                      RerangeTheBufferQueue('r');
 805   3                  }
 806   2                  RI0 = 0;                           // Clear interrupt flag
 807   2         }
 808   1      
 809   1         if (TI0 == 1)                   // Check if transmit flag is set
 810   1         {
 811   2                 TX_Ready = 1;
 812   2                 TI0 = 0;
 813   2      //      if ( UART_Transmit_Buffer_QueueHead < UART_Transmit_Buffer_QueueBottom )         // If buffer not 
             -empty
 814   2      //      {
 815   2      ////         Byte = UART_Buffer[UART_Output_First];
 816   2      ////         if ((Byte >= 0x61) && (Byte <= 0x7A)) { // If upper case letter
 817   2      ////            Byte -= 32; }
 818   2      ////                                    int count = UART_Transmit_Buffer_QueueBottom - UART_Transmit_Buffer_QueueHead;
 819   2      ////                                    for(;count>0;count--)
 820   2      ////                                    {
 821   2      ////                                            Uart0_SendByte(*UART_Transmit_Buffer_QueueHead);  // Transmit to Hyperterminal
 822   2      ////                                        UART_Transmit_Buffer_QueueHead++;
 823   2      ////                                    }
 824   2      ////              while( UART_Transmit_Buffer_QueueHead < UART_Transmit_Buffer_QueueBottom )
 825   2      ////              {
 826   2      //                        TI0 = 0;
 827   2      //                        SBUF0 = *UART_Transmit_Buffer_QueueHead;
 828   2      //                        while( !TI0 );
 829   2      //                        ++UART_Transmit_Buffer_QueueHead;
 830   2      ////              }
 831   2      //      }
 832   2      //      else
 833   2      //        {
 834   2      //                TX_Ready = 1;                    // Indicate transmission complete
 835   2      //                TI0 = 0;                           // Clear interrupt flag
 836   2      //        }
 837   2         }
 838   1      }
 839          //-----------------------------------------------------------------------------
 840          // UART1_Interrupt
 841          //-----------------------------------------------------------------------------
 842          //
 843          // This routine is invoked whenever a character is entered or displayed on the
 844          // Hyperterminal.
 845          //
 846          //-----------------------------------------------------------------------------
 847          
 848          
 849          
 850          //-----------------------------------------------------------------------------
 851          // RerangeTheBufferQueue
 852          //-----------------------------------------------------------------------------
 853          //
 854          // This routine is invoked to rerange the UART buffer queue when the bottom point has get to the bottom li
             -mit
 855          //-----------------------------------------------------------------------------
 856          void RerangeTheBufferQueue( char IndexOfBuffer)
 857          {
 858   1              if( IndexOfBuffer == 'r')//rerange the receive buffer
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 15  

 859   1              {
 860   2                      int count = UART_Receive_Buffer_QueueBottom-UART_Receive_Buffer_QueueHead;
 861   2                      int i=0;
 862   2                      for(i=0;i<count;i++)
 863   2                      {
 864   3                                      *(UART_Receive_Buffer_Queue+i)= UART_Receive_Buffer_QueueHead;
*** WARNING C260 IN LINE 864 OF FlashTestMain.c: '=': pointer truncation
 865   3                                      UART_Receive_Buffer_QueueHead++;
 866   3                                      
 867   3                      }
 868   2                      UART_Receive_Buffer_QueueHead=UART_Receive_Buffer_Queue;
 869   2                      UART_Receive_Buffer_QueueBottom=UART_Receive_Buffer_QueueHead+count;
 870   2              }
 871   1              
 872   1              if( IndexOfBuffer == 't')//rerange the transmit buffer
 873   1              {
 874   2                      int count = UART_Transmit_Buffer_QueueBottom-UART_Transmit_Buffer_QueueHead;
 875   2                      int i=0;  
 876   2                      for(i=0;i<count;i++)
 877   2                      {
 878   3                                      *(UART_Transmit_Buffer_Queue+i)= UART_Transmit_Buffer_QueueHead;
*** WARNING C260 IN LINE 878 OF FlashTestMain.c: '=': pointer truncation
 879   3                                      UART_Transmit_Buffer_QueueHead++;
 880   3                                      
 881   3                      }
 882   2                      UART_Transmit_Buffer_QueueHead=UART_Transmit_Buffer_Queue;
 883   2                      UART_Transmit_Buffer_QueueBottom=UART_Transmit_Buffer_QueueHead+count;
 884   2              }       
 885   1      }
 886          //-----------------------------------------------------------------------------
 887          // WirelessModule_Init
 888          //-----------------------------------------------------------------------------
 889          //
 890          //-----------------------------------------------------------------------------
 891          void WirelessModule_Init(void)
 892          {
 893   1              SET=1; // Enter the SET mode of the wireless module
 894   1              memset( UART_Transmit_Buffer_Queue,0,sizeof(UART_Transmit_Buffer_Queue) );
 895   1      }
 896          //-----------------------------------------------------------------------------
 897          // Uart0_SendByte
 898          //-----------------------------------------------------------------------------
 899          //
 900          //-----------------------------------------------------------------------------
 901          void Uart0_SendByte(unsigned char value)
 902          {
 903   1              char data SFRPAGE_SAVE = SFRPAGE;//save current SFR page
 904   1              int i = 0;
 905   1              SFRPAGE = UART0_PAGE;
 906   1      //      //Check if the uart transmit is ready
 907   1      //      while(1)
 908   1      //      {
 909   1      //              if( TI0 == 0 && TX_Ready == 1)
 910   1      //              {
 911   1      //                      break;
 912   1      //              }
 913   1      //      }
 914   1      //      
 915   1      //      //Check if there are enough space
 916   1      //      if( UART_Transmit_Buffer_QueueBottom - UART_Transmit_Buffer_Queue >= UART_BUFFERSIZE )
 917   1      //      {
 918   1      //              RerangeTheBufferQueue('t');
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 16  

 919   1      //      }
 920   1      //      //Write the Byte to the Transmit queue
 921   1      //      *UART_Transmit_Buffer_QueueBottom = value;
 922   1      //      ++UART_Transmit_Buffer_QueueBottom;
 923   1      //      //Set the TI0 
 924   1      //      TI0 = 1;
 925   1          while( TX_Ready == 0 );
 926   1              
 927   1              TI0 = 0;
 928   1              TX_Ready = 0;
 929   1              SBUF0 = value;
 930   1              while(!TX_Ready)
 931   1              {
 932   2                      ;
 933   2              }
 934   1              SFRPAGE = SFRPAGE_SAVE;//Recover the SFR Page
 935   1      }
 936          //-----------------------------------------------------------------------------
 937          // Calibration
 938          //-----------------------------------------------------------------------------
 939          //
 940          //-----------------------------------------------------------------------------
 941          //void Calibration(void)
 942          //{
 943          //      char a_flag = 0,w_flag = 0,angle_flag = 0;
 944          //      UART0_Receive_Buffer_Size = UART_Receive_Buffer_QueueBottom - UART_Receive_Buffer_QueueHead;
 945          ////    strcat(UART_Transmit_Buffer_QueueHead,"ReadyToAdjust");
 946          ////    UART_Transmit_Buffer_QueueBottom += strlen("ReadyToAdjust");
 947          //      Uart0_SendByte('R');
 948          //      
 949          ////    Global_SFRPAGE_SAVE = SFRPAGE;
 950          ////    SFRPAGE = ADC0_PAGE;
 951          ////    TX_Ready = 0;                  // Set the flag to zero
 952          ////    TI0 = 1;                       // Set transmit flag to 1
 953          ////    SFRPAGE = Global_SFRPAGE_SAVE;
 954          //      
 955          //      while(1)
 956          //      {
 957          //              while( Rcv_New == 0 );//Wait for new message
 958          //              Rcv_New = 0;
 959          //              
 960          //              if( *UART_Receive_Buffer_QueueHead++ != 'Z' )
 961          //              {
 962          //                      continue;
 963          //              }
 964          //              else
 965          //              {
 966          //                      while(1)
 967          //                      {
 968          //                              if(UART1_Receive_Buffer_Queue[0]==0x55)      
 969          //                              {  
 970          //                                      switch(UART1_Receive_Buffer_Queue [1])
 971          //                                      {
 972          //                                              case 0x51:
 973          //                                              a = (int)(UART1_Receive_Buffer_Queue [3]<<8| UART1_Receive_Buffer_Queue [2]);
 974          //                                              Temp = (int)(UART1_Receive_Buffer_Queue [9]<<8| UART1_Receive_Buffer_Queue [8]);
 975          //                                              a_flag = 1;
 976          //                                              break;
 977          //                                              case 0x52:
 978          //                                              w = (int)(UART1_Receive_Buffer_Queue [3]<<8| UART1_Receive_Buffer_Queue [2]);
 979          //                                              w_flag = 1;
 980          //                                              break;
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 17  

 981          //                                              case 0x53:
 982          //                                              angle = (int)((unsigned int)UART1_Receive_Buffer_Queue [3]<<8| UART1_Receive_Buffer_Queue [2]);
 983          //                                              angle_flag = 1;
 984          //                                              break;
 985          //                                      } 
 986          //                              }
 987          //                              
 988          //                              if( a_flag + w_flag + angle_flag == 3 )
 989          //                              {
 990          //                                      break;
 991          //                              }
 992          //                      }
 993          //                      
 994          //                      //Save the current state to ZeroPoint
 995          //                      ZeroPoint_a = a;
 996          //                      ZeroPoint_w = w;
 997          //                      ZeroPoint_angle = angle;
 998          //                      ZeroPoint_Temp = Temp;
 999          //                      //
1000          //                      SaveMapToFlash();
1001          //                      return;
1002          //              }
1003          
1004          //      }
1005          //}
1006          
1007          
1008          //-----------------------------------------------------------------------------
1009          //      Delay_ms
1010          //-----------------------------------------------------------------------------
1011          //      input:count
1012          //      output:void
1013          //      make the Program wait for count ms
1014          //-----------------------------------------------------------------------------
1015          void Delay_ms(unsigned int count)
1016          {
1017   1              unsigned char ii,jj;
1018   1              for(ii=0;ii<count;ii++)
1019   1              {
1020   2                      for(jj=0;jj<250;jj++)
1021   2                              ;
1022   2              }
1023   1      }
1024          
1025          
1026          
1027          
1028          
1029          void Uart0_TransmitString(unsigned char * pucString , int iStringSize )
1030          {
1031   1              unsigned char *pucHeadofString = pucString;
1032   1      //      if( strlen(pucString) != iStringSize )
1033   1      //      {
1034   1      //              ERROR("Uart0_TransmitString():string lenth not match");
1035   1      //      }
1036   1              
1037   1      
1038   1              while( *pucHeadofString != 0 )
1039   1              {
1040   2                      Uart0_SendByte(*pucHeadofString);
1041   2                      ++pucHeadofString;
1042   2              }
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 18  

1043   1              
1044   1              
1045   1      }
*** WARNING C280 IN LINE 1029 OF FlashTestMain.c: 'iStringSize': unreferenced local variable
1046          
1047          void PWMChange(void)
1048          {
1049   1              int i= 0;
1050   1              /*************************DEBUG BEGIN*************************/
1051   1              if( uiPWM1Degree > 800 )
1052   1              {
1053   2                      ERROR("void PWMChange(char PWMChannel):PWMDegree is too large");
1054   2              }
1055   1              //------------------------DEBUG END-------------------------------
1056   1              PWMDEGREE_Low8Bits  = (unsigned char)uiPWM1Degree;
1057   1              PWMDEGREE_HighBit0 = (uiPWM1Degree & 0x100)?1:0;
1058   1              cDebugTmp = (uiPWM1Degree & 0x100)?1:0;
1059   1              PWMDEGREE_HighBit1 = (uiPWM1Degree & 0x200)?1:0;
1060   1              cDebugTmp = (uiPWM1Degree & 0x200)?1:0;
1061   1              
1062   1              PWM1CHANGEORDER =  0;
1063   1              while( PWM1CHANGEORDER != 0 );//wait
1064   1              PWM1CHANGEORDER =  1;
1065   1              PWM2CHANGEORDER =  0;
1066   1              while( PWM2CHANGEORDER != 0 );//wait
1067   1              PWM2CHANGEORDER =  1;
1068   1      }
1069          void TouchKeepAlive(void)
1070          {
1071   1              char data SFRPAGE_SAVE =SFRPAGE;
1072   1              SFRPAGE=TIMER01_PAGE;
1073   1              KeepAliveTime_i = 0;
1074   1              ET0 = 1;//Enable Timer0 interrupt
1075   1              TR0 = 1;//Run Timer0
1076   1              SFRPAGE = SFRPAGE_SAVE;
1077   1      }
1078          void LostConnect(void)
1079          {
1080   1              uiPWM1Degree=uiPWM2Degree=0;
1081   1              PWMChange();
1082   1              IN11=0;
1083   1              IN12=0;
1084   1              IN31=0;
1085   1              IN32=0;
1086   1      //      Uart0_TransmitString("lost connect",strlen("lost connect"));
1087   1      //      Acknowledge('s');
1088   1      }
1089          void Acknowledge(unsigned char back)
1090          {
1091   1      Uart0_SendByte(0x54);
1092   1              Uart0_SendByte(back);
1093   1              Uart0_SendByte(1);
1094   1              Uart0_SendByte(back+1);
1095   1              
1096   1              
1097   1      }
1098          //-----------------------------------------------------------------------------
1099          // End Of File
1100          //-----------------------------------------------------------------------------
*** WARNING C294 IN LINE 444 OF FlashTestMain.c: unreachable code
*** WARNING C294 IN LINE 450 OF FlashTestMain.c: unreachable code

C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     09/16/2015 19:47:05 PAGE 19  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1629    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =    299      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
