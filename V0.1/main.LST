C51 COMPILER V9.53.0.0   MAIN                                                              07/25/2015 11:17:47 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F12x_UART0_Interrupt.c
   3          //-----------------------------------------------------------------------------
   4          // ????????????? RJ ?? ???????
   5          // ???????:     http://dadastudio.taobao.com/ 
   6          // ????????      C8051F12x-13x???.pdf ?? 21 ?:UART0
   7          //
   8          // Copyright 2006 Silicon Laboratories, Inc.
   9          // http://www.silabs.com
  10          //
  11          // Program Description:
  12          //
  13          // This program demonstrates how to configure the C8051F120 to write to and read 
  14          // from the UART interface. The program reads a word using the UART0 interrupts 
  15          // and outputs that word to the screen, with all characters in uppercase
  16          //
  17          // How To Test:
  18          //
  19          // 1) Download code to a 'F12x device that is connected to a UART transceiver
  20          // 2) Verify jumpers J6 and J9 are populated on the 'F12x TB.
  21          // 3) Connect serial cable from the transceiver to a PC
  22          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  23          //    to the COM port at <BAUDRATE> and 8-N-1
  24          // 5) Download and execute code on an 'F12x target board.
  25          // 6) Type up to 64 characters into the Terminal and press Enter.  The MCU 
  26          //    will then print back the characters that were typed
  27          //   
  28          //
  29          // Target:         C8051F12x
  30          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  31          // Command Line:   None
  32          //
  33          // Release 1.0
  34          //    -Initial Revision (SM)
  35          //    -11 JULY 2007
  36          //
  37          
  38          
  39          //-----------------------------------------------------------------------------
  40          // Includes
  41          //-----------------------------------------------------------------------------
  42          
  43          #include <c8051f120.h>                 // SFR declarations
  44          #include <stdio.h>                     
  45          #include <string.h>
  46          //-----------------------------------------------------------------------------
  47          // 16-bit SFR Definitions for 'F12x
  48          //-----------------------------------------------------------------------------
  49          
  50          sfr16 RCAP2    = 0xca;                 // Timer2 capture/reload
  51          sfr16 TMR2     = 0xcc;                 // Timer2
  52          
  53          //-----------------------------------------------------------------------------
  54          // Global Constants
  55          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   MAIN                                                              07/25/2015 11:17:47 PAGE 2   

  56          
  57          #define BAUDRATE     9600            // Baud rate of UART in bps
  58          
  59          // SYSTEMCLOCK = System clock frequency in Hz
  60          #define SYSTEMCLOCK       (22118400L * 9 / 4)
  61          
  62          //-----------------------------------------------------------------------------
  63          // Function Prototypes
  64          //-----------------------------------------------------------------------------
  65          
  66          void OSCILLATOR_Init (void);         
  67          void PORT_Init (void);
  68          void UART0_Init (void);
  69          void RerangeTheBufferQueue(void);
  70          void WirelessModule_Init(void);
  71          void Uart0_SendByte(unsigned char value);
  72          void TIMER0_Init(unsigned int count);
  73          void TIMER1_Init(unsigned int count);
  74          
  75          //-----------------------------------------------------------------------------
  76          // Global Variables
  77          //-----------------------------------------------------------------------------
  78          
  79          #define UART_BUFFERSIZE 64
  80          unsigned char UART_Buffer_Queue[UART_BUFFERSIZE];
  81          unsigned char * UART_Buffer_QueueHead=UART_Buffer_Queue;
  82          unsigned char * UART_Buffer_QueueBottom=UART_Buffer_Queue;
  83          unsigned char TX_Ready =1;
  84          static char Byte;
  85          //----------------------PWM----------------------------------------------------
  86          #define PWM1_HighLevelPercent 0.1
  87          #define PWM3_HighLevelPercent 0.1
  88          sbit PWM1       =       P3^2;                      
  89          sbit PWM3   =   P3^3;
  90          bit pwm1_flag=0;
  91          bit pwm3_flag=0;
  92          unsigned int PWM1_HighLevelCount=0;
  93          unsigned int PWM1_LowLevelCount=0;
  94          unsigned int PWM3_HighLevelCount=0;
  95          unsigned int PWM3_LowLevelCount=0;
  96          //-----------------------------------------------------------------------------
  97          // main() Routine
  98          //-----------------------------------------------------------------------------
  99          
 100          void main (void)
 101          {
 102   1           
 103   1         SFRPAGE = CONFIG_PAGE;
 104   1      
 105   1         WDTCN = 0xDE;                       // Disable watchdog timer
 106   1         WDTCN = 0xAD;
 107   1      
 108   1         OSCILLATOR_Init ();                 // Initialize oscillator
 109   1         PORT_Init ();                       // Initialize crossbar and GPIO
 110   1              TIMER0_Init(SYSTEMCLOCK/2000);
 111   1              TIMER1_Init(SYSTEMCLOCK/2000);
 112   1      
 113   1         UART0_Init ();                      // Initialize UART0
 114   1         WirelessModule_Init();
 115   1         EA = 1;
 116   1      
 117   1         SFRPAGE = UART0_PAGE;   
C51 COMPILER V9.53.0.0   MAIN                                                              07/25/2015 11:17:47 PAGE 3   

 118   1      
 119   1              while (1)
 120   1         {  
 121   2                      if(UART_Buffer_QueueHead < UART_Buffer_QueueBottom)
 122   2                      {
 123   3                              Uart0_SendByte(*UART_Buffer_QueueHead);
 124   3                              ++UART_Buffer_QueueHead;
 125   3                      }               
 126   2         }
 127   1      }
 128          
 129          //-----------------------------------------------------------------------------
 130          // Initialization Subroutines
 131          //-----------------------------------------------------------------------------
 132          
 133          //-----------------------------------------------------------------------------
 134          // OSCILLATOR_Init
 135          //-----------------------------------------------------------------------------
 136          //
 137          // Return Value : None
 138          // Parameters   : None
 139          //
 140          // This function initializes the system clock to use the PLL as its clock
 141          // source, where the PLL multiplies the external 22.1184MHz crystal by 9/4.
 142          //
 143          //-----------------------------------------------------------------------------
 144          void OSCILLATOR_Init (void)
 145          {
 146   1         int i;                              // Software timer
 147   1      
 148   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 149   1      
 150   1         SFRPAGE = CONFIG_PAGE;              // Set SFR page
 151   1      
 152   1         OSCICN = 0x80;                      // Set internal oscillator to run
 153   1                                             // at its slowest frequency
 154   1      
 155   1         CLKSEL = 0x00;                      // Select the internal osc. as
 156   1                                             // the SYSTEMCLOCK source
 157   1      
 158   1         // Initialize external crystal oscillator to use 22.1184 MHz crystal
 159   1      
 160   1         OSCXCN = 0x67;                      // Enable external crystal osc.
 161   1         for (i=0; i < 256; i++);            // Wait at least 1ms
 162   1      
 163   1         while (!(OSCXCN & 0x80));           // Wait for crystal osc to settle
 164   1      
 165   1         SFRPAGE = LEGACY_PAGE;
 166   1         FLSCL |=  0x30;                     // Initially set FLASH read timing for
 167   1                                             // 100MHz SYSTEMCLOCK (most conservative
 168   1                                             // setting)
 169   1         if (SYSTEMCLOCK <= 25000000) {           
 170   2         // Set FLASH read timing for <=25MHz
 171   2            FLSCL &= ~0x30;
 172   2         } else if (SYSTEMCLOCK <= 50000000) {    
 173   2         // Set FLASH read timing for <=50MHz
 174   2            FLSCL &= ~0x20;
 175   2         } else if (SYSTEMCLOCK <= 75000000) {    
 176   2         // Set FLASH read timing for <=75MHz
 177   2            FLSCL &= ~0x10;
 178   2         } else {                            // set FLASH read timing for <=100MHz
 179   2            FLSCL &= ~0x00;
C51 COMPILER V9.53.0.0   MAIN                                                              07/25/2015 11:17:47 PAGE 4   

 180   2         }
 181   1      
 182   1         // Start PLL for 50MHz operation
 183   1         SFRPAGE = PLL0_PAGE;
 184   1         PLL0CN = 0x04;                      // Select EXTOSC as clk source
 185   1         PLL0CN |= 0x01;                     // Enable PLL power
 186   1         PLL0DIV = 0x04;                     // Divide by 4
 187   1         PLL0FLT &= ~0x0f;
 188   1         PLL0FLT |=  0x0f;                   // Set Loop Filt for (22/4)MHz input clock
 189   1         PLL0FLT &= ~0x30;                   // Set ICO for 30-60MHz
 190   1         PLL0FLT |=  0x10;
 191   1      
 192   1         PLL0MUL = 0x09;                     // Multiply by 9
 193   1      
 194   1         // wait at least 5us
 195   1         for (i = 0; i < 256; i++) ;
 196   1      
 197   1         PLL0CN |= 0x02;                     // Enable PLL
 198   1      
 199   1         while (PLL0CN & 0x10 == 0x00);      // Wait for PLL to lock
 200   1      
 201   1         SFRPAGE = CONFIG_PAGE;
 202   1      
 203   1         CLKSEL = 0x02;                      // Select PLL as SYSTEMCLOCK source
 204   1      
 205   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 206   1      }
 207          
 208          
 209          //-----------------------------------------------------------------------------
 210          // PORT_Init
 211          //-----------------------------------------------------------------------------
 212          //
 213          // Return Value : None
 214          // Parameters   : None
 215          //
 216          // This function configures the crossbar and GPIO ports.
 217          //
 218          // P0.0   digital   push-pull     UART TX
 219          // P0.1   digital   open-drain    UART RX
 220          //-----------------------------------------------------------------------------
 221          void PORT_Init (void)
 222          {
 223   1              char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 224   1      
 225   1              SFRPAGE = CONFIG_PAGE;              // Set SFR page
 226   1      
 227   1              XBR0     = 0x04;                    // Enable UART0
 228   1              XBR1     = 0x00;
 229   1              XBR2     = 0x40;                    // Enable crossbar and weak pull-up
 230   1                                             
 231   1      
 232   1              P0MDOUT |= 0x01;                    // Set TX pin to push-pull
 233   1              P1MDOUT |= 0x40;                    // Set P1.6(LED) to push-pull
 234   1              P3MDOUT = 0xFF;                                         // P3.x is open-drain
 235   1              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 236   1      }
 237          
 238          
 239          //-----------------------------------------------------------------------------
 240          // UART0_Init   Variable baud rate, Timer 2, 8-N-1
 241          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   MAIN                                                              07/25/2015 11:17:47 PAGE 5   

 242          //
 243          // Return Value : None
 244          // Parameters   : None
 245          //
 246          // Configure UART0 for operation at <baudrate> 8-N-1 using Timer2 as
 247          // baud rate source.
 248          //
 249          //-----------------------------------------------------------------------------
 250          void UART0_Init (void)
 251          {
 252   1         char SFRPAGE_SAVE;
 253   1      
 254   1         SFRPAGE_SAVE = SFRPAGE;             // Preserve SFRPAGE
 255   1      
 256   1         SFRPAGE = TMR2_PAGE;
 257   1      
 258   1         TMR2CN = 0x00;                      // Timer in 16-bit auto-reload up timer
 259   1                                             // mode
 260   1         TMR2CF = 0x08;                      // SYSCLK is time base; no output;
 261   1                                             // up count only
 262   1         RCAP2 = - ((long) SYSTEMCLOCK/BAUDRATE/16);
 263   1         TMR2 = RCAP2;
 264   1         TR2= 1;                             // Start Timer2
 265   1      
 266   1         SFRPAGE = UART0_PAGE;
 267   1      
 268   1         SCON0 = 0x50;                       // 8-bit variable baud rate;
 269   1                                             // 9th bit ignored; RX enabled
 270   1                                             // clear all flags
 271   1         SSTA0 = 0x15;                       // Clear all flags; enable baud rate
 272   1                                             // doubler (not relevant for these
 273   1                                             // timers);
 274   1                                             // Use Timer2 as RX and TX baud rate
 275   1                                             // source;
 276   1         ES0 = 1;  
 277   1         IP |= 0x10;
 278   1      
 279   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 280   1      }
 281          
 282          
 283          //-----------------------------------------------------------------------------
 284          // Interrupt Service Routines
 285          //-----------------------------------------------------------------------------
 286          
 287          //-----------------------------------------------------------------------------
 288          // UART0_Interrupt
 289          //-----------------------------------------------------------------------------
 290          //
 291          // This routine is invoked whenever a character is entered or displayed on the
 292          // Hyperterminal.
 293          //
 294          //-----------------------------------------------------------------------------
 295          
 296          void UART0_Interrupt (void) interrupt 4
 297          {
 298   1         SFRPAGE = UART0_PAGE;
 299   1      
 300   1         if ( RI0 == 1 && (UART_Buffer_QueueBottom-UART_Buffer_Queue) < UART_BUFFERSIZE ) //if the buffer is not
             - full
 301   1         {
 302   2            RI0 = 0;                           // Clear interrupt flag
C51 COMPILER V9.53.0.0   MAIN                                                              07/25/2015 11:17:47 PAGE 6   

 303   2            Byte = SBUF0;                      // Read a character from UART
 304   2      
 305   2            if ( UART_Buffer_QueueBottom < (UART_Buffer_Queue+UART_BUFFERSIZE) )
 306   2            {
 307   3                              *UART_Buffer_QueueBottom = Byte; // Store in array
 308   3                              UART_Buffer_QueueBottom++;
 309   3                              if( UART_Buffer_QueueBottom >= (UART_Buffer_Queue+UART_BUFFERSIZE) )
 310   3                                      RerangeTheBufferQueue();
 311   3            }
 312   2                else
 313   2                        RerangeTheBufferQueue();
 314   2         }
 315   1      
 316   1         if (TI0 == 1)                   // Check if transmit flag is set
 317   1         {
 318   2            TI0 = 0;                           // Clear interrupt flag
 319   2      
 320   2            TX_Ready = 1;                    // Indicate transmission complete
 321   2           
 322   2         }
 323   1      }
 324          
 325          //-----------------------------------------------------------------------------
 326          // RerangeTheBufferQueue
 327          //-----------------------------------------------------------------------------
 328          //
 329          // This routine is invoked to rerange the UART buffer queue when the bottom point has get to the bottom li
             -mit
 330          //-----------------------------------------------------------------------------
 331          void RerangeTheBufferQueue(void)
 332          {
 333   1                      int count = UART_Buffer_QueueBottom-UART_Buffer_QueueHead;
 334   1                      int i=0;
 335   1                      for(i=0;i<count;i++)
 336   1                      {
 337   2                                      *(UART_Buffer_Queue+i)= UART_Buffer_QueueHead;
*** WARNING C260 IN LINE 337 OF main.c: '=': pointer truncation
 338   2                                      UART_Buffer_QueueHead++;
 339   2                                      
 340   2                      }
 341   1                      UART_Buffer_QueueHead=UART_Buffer_Queue;
 342   1                      UART_Buffer_QueueBottom=UART_Buffer_QueueHead+count;
 343   1      }
 344          //-----------------------------------------------------------------------------
 345          // WirelessModule_Init
 346          //-----------------------------------------------------------------------------
 347          //
 348          //-----------------------------------------------------------------------------
 349          void WirelessModule_Init(void)
 350          {
 351   1              P3 = 0xFF; // Enter the SET mode of the wireless module
 352   1              strcat(UART_Buffer_Queue,"helloworld");
 353   1              UART_Buffer_QueueBottom += strlen("helloworld");
 354   1      }
 355          //-----------------------------------------------------------------------------
 356          // Uart0_SendByte
 357          //-----------------------------------------------------------------------------
 358          //
 359          //-----------------------------------------------------------------------------
 360          void Uart0_SendByte(unsigned char value)
 361          {
 362   1              char data SFRPAGE_SAVE = SFRPAGE;//save current SFR page
C51 COMPILER V9.53.0.0   MAIN                                                              07/25/2015 11:17:47 PAGE 7   

 363   1              SFRPAGE = UART0_PAGE;
 364   1              
 365   1              while(!TX_Ready);
 366   1              TX_Ready = 0;
 367   1              SBUF0 = value;
 368   1              
 369   1              
 370   1              SFRPAGE = SFRPAGE_SAVE;//Recover the SFR Page
 371   1      }
 372          void TIMER0_Init(unsigned int count)
 373          {
 374   1      
 375   1              char data SFRPAGE_SAVE =SFRPAGE;
 376   1              PWM1_HighLevelCount = count * (1-PWM1_HighLevelPercent);
 377   1              PWM1_LowLevelCount = (float)count * PWM1_HighLevelPercent;
 378   1              SFRPAGE=TIMER01_PAGE;
 379   1              TCON &= ~0x30;//stop the timer0
 380   1              TMOD &= ~0x00;//Set the timer0 work in mode of hex
 381   1              TMOD |= 0x01;
 382   1              CKCON = 0X08;
 383   1              TR0 = 0;
 384   1              TH0 = count;
 385   1              TL0 = count;
 386   1              ET0 = 1;
 387   1              TR0 =1;
 388   1              SFRPAGE = SFRPAGE_SAVE;
 389   1      }
 390          void TIMER1_Init(unsigned int count)
 391          {
 392   1              char data SFRPAGE_SAVE =SFRPAGE;
 393   1              PWM3_HighLevelCount = count * (1-PWM3_HighLevelPercent);
 394   1              PWM3_LowLevelCount = (float)count * PWM3_HighLevelPercent;
 395   1              SFRPAGE=TIMER01_PAGE;
 396   1              TCON &= ~0xC0;//stop timer1 ,clear TF1
 397   1              
 398   1              TMOD &= ~0x30;//Set the timer1 work in mode of hex
 399   1              TMOD |= 0x10;
 400   1              
 401   1              CKCON |= 0x10;
 402   1              TR1 = 0;
 403   1              TH1 = count;
 404   1              TL1 = count;
 405   1              ET1 = 1;
 406   1              TR1 =1;
 407   1              SFRPAGE = SFRPAGE_SAVE;
 408   1      }
 409          void Timer0_ISR(void) interrupt 1
 410          {
 411   1              if(!pwm1_flag)
 412   1              {
 413   2                      //Start of High level
 414   2                              pwm1_flag = 1;  //Set flag
 415   2                              PWM1 = 1;       //Set PWM o/p pin
 416   2                              TH0 = (0xFFFF-PWM1_HighLevelCount)>>8;  //Load timer
 417   2                              TL0 = (0xFFFF-PWM1_HighLevelCount);
 418   2                              TF0 = 0;                //Clear interrupt flag
 419   2                              return;         //Return
 420   2              }
 421   1              else
 422   1              {       //Start of Low level
 423   2                      pwm1_flag = 0;  //Clear flag
 424   2                      PWM1 = 0;       //Clear PWM o/p pin
C51 COMPILER V9.53.0.0   MAIN                                                              07/25/2015 11:17:47 PAGE 8   

 425   2                      TH0 = (0xFFFF-PWM1_LowLevelCount)>>8;   //Load timer
 426   2                      TL0 = (0xFFFF-PWM1_LowLevelCount);
 427   2                      TF0 = 0;        //Clear Interrupt flag
 428   2                      return;         //return
 429   2              }
 430   1      }
 431          void Timer1_ISR(void) interrupt 3
 432          {
 433   1              if(!pwm3_flag)
 434   1              {
 435   2                      //Start of High level
 436   2                              pwm3_flag = 1;  //Set flag
 437   2                              PWM3 = 1;       //Set PWM o/p pin
 438   2                              TH1 = (0xFFFF-PWM3_HighLevelCount)>>8;  //Load timer
 439   2                              TL1 = (0xFFFF-PWM3_HighLevelCount);
 440   2                              TF1 = 0;                //Clear interrupt flag
 441   2                              return;         //Return
 442   2              }
 443   1              else
 444   1              {       //Start of Low level
 445   2                      pwm3_flag = 0;  //Clear flag
 446   2                      PWM3 = 0;       //Clear PWM o/p pin
 447   2                      TH1 = (0xFFFF-PWM3_LowLevelCount)>>8;   //Load timer
 448   2                      TL1 = (0xFFFF-PWM3_LowLevelCount);
 449   2                      TF1 = 0;        //Clear Interrupt flag
 450   2                      return;         //return
 451   2              }
 452   1      }
 453          //-----------------------------------------------------------------------------
 454          // End Of File
 455          //-----------------------------------------------------------------------------
*** WARNING C294 IN LINE 171 OF main.c: unreachable code
*** WARNING C294 IN LINE 177 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    823    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     80       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
