C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FLASHTESTMAIN
OBJECT MODULE PLACED IN FlashTestMain.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE FlashTestMain.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F12x_UART0_Interrupt.c
   3          //-----------------------------------------------------------------------------
   4          // ????????????? RJ ?? ???????
   5          // ???????:     http://dadastudio.taobao.com/ 
   6          // ????????      C8051F12x-13x???.pdf ?? 21 ?:UART0
   7          //
   8          // Copyright 2006 Silicon Laboratories, Inc.
   9          // http://www.silabs.com
  10          //
  11          // Program Description:
  12          //
  13          // This program demonstrates how to configure the C8051F120 to write to and read 
  14          // from the UART interface. The program reads a word using the UART0 interrupts 
  15          // and outputs that word to the screen, with all characters in uppercase
  16          //
  17          // How To Test:
  18          //
  19          // 1) Download code to a 'F12x device that is connected to a UART transceiver
  20          // 2) Verify jumpers J6 and J9 are populated on the 'F12x TB.
  21          // 3) Connect serial cable from the transceiver to a PC
  22          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  23          //    to the COM port at <BAUDRATE> and 8-N-1
  24          // 5) Download and execute code on an 'F12x target board.
  25          // 6) Type up to 64 characters into the Terminal and press Enter.  The MCU 
  26          //    will then print back the characters that were typed
  27          //   
  28          //
  29          // Target:         C8051F12x
  30          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  31          // Command Line:   None
  32          //
  33          // Release 1.0
  34          //    -Initial Revision (SM)
  35          //    -11 JULY 2007
  36          //
  37          //       P5.0-->PWMHigelevel bit0
  38          //       P5.1-->PWMHigelevel bit1
  39          //       P5.2-->PWMHigelevel bit2
  40          //       P5.3-->PWMHigelevel bit3
  41          //   P5.4-->PWMHigelevel bit4
  42          //       P5.5-->PWMHigelevel bit5
  43          //   P5.6-->PWMHigelevel bit6
  44          //       P5.7-->PWMHigelevel bit7
  45          //       P4.6-->PWMHigelevel bit8
  46          //       P4.7-->PWMHigelevel bit9
  47          //       P4.0-->cPWM1ChangeOrder
  48          //   P4.1-->cPWM2ChangeOrder
  49          
  50          //-----------------------------------------------------------------------------
  51          // Includes
  52          //-----------------------------------------------------------------------------
  53          
  54          #include <c8051f120.h>                 // SFR declarations
  55          #include <stdio.h>                     
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 2   

  56          #include <string.h>
  57          #include <F120_FlashPrimitives.h>
  58          #include <math.h>
  59          #include "MyDebug.h"
  60          //-----------------------------------------------------------------------------
  61          // 16-bit SFR Definitions for 'F12x
  62          //-----------------------------------------------------------------------------
  63          
  64          sfr16 RCAP2    = 0xca;                 // Timer2 capture/reload
  65          sfr16 TMR2     = 0xcc;                 // Timer2
  66          
  67          //-----------------------------------------------------------------------------
  68          // Global Constants
  69          //-----------------------------------------------------------------------------
  70          
  71          #define BAUDRATE     9600            // Baud rate of UART in bps
  72          #define UART1BAUDRATE 115200             
  73          #define Const_Control_Time      10                      //ADC cycle = Const_Control_Time*Timer0 cycle = 10*10ms=100ms
  74          sbit PWM1       =       P3^2;                      
  75          sbit IN11               =       P6^3;
  76          sbit IN12               =       P6^4;
  77          sbit TMR3Debug  =   P3^5;
  78          sbit SET                =       P3^1;
  79          sbit Key1               =       P7^2;
  80          sbit PWM3               =       P6^7;
  81          sbit IN31               =       P6^5;
  82          sbit IN32               =       P6^6;
  83          sbit DEBUGPORT  =   P3^0;
  84          sbit PWM1CHANGEORDER = P4^0;
  85          sbit PWM2CHANGEORDER = P4^1;
  86          sbit PWMDEGREE_HighBit0=P4^6;
  87          sbit PWMDEGREE_HighBit1=P4^7;
  88          sbit D0 = P5^0;
  89          sbit D1 = P5^1;
  90          sbit D2 = P5^2;
  91          sbit D3 = P5^3;
  92          sbit D4 = P5^4;
  93          sbit D5 = P5^5;
  94          sbit D6 = P5^6;
  95          sbit D7 = P5^7;
  96          // SYSTEMCLOCK = System clock frequency in Hz
  97          #define SYSTEMCLOCK       (22118400L * 9 / 4)
  98          #define TIMER0CLOCK                     (SYSTEMCLOCK/48)
  99          #define TIMER1CLOCK             (SYSTEMCLOCK/48)
 100          #define TIMER3CLOCK                     (SYSTEMCLOCK/48)
 101          #define MAP_ADC_ANGEL_SIZE  13
 102          #define UART_BUFFERSIZE 64
 103          #define UART1_BUFFERSIZE 22
 104          #define PWMDEGREE_Low8Bits P5
 105          
 106          //--------------------------------POSE & Control-------------------------------------------
 107          #define MAX_PWM 800
 108          #define ANGELRANGE_SIZE 7
 109          #define ANGELSCALE_10 0xF8E3  //-10
 110          #define ANGELSCALE_5 0xFC71  //-5
 111          #define ANGELSCALE_3 0xFDDD  //-3
 112          #define ANGELSCALE0  0x0000  //0
 113          #define ANGELSCALE3  0x0222  //3
 114          #define ANGELSCALE5  0x038E  //5
 115          #define ANGELSCALE10  0x071C  //10
 116          
 117          #define ADJUST_THRESHOLD 100
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 3   

 118          #define PWM_CHG_GAP 50
 119          //-----------------------------------------------------------------------------
 120          // Function Prototypes
 121          //-----------------------------------------------------------------------------
 122          
 123          void OSCILLATOR_Init (void);         
 124          void PORT_Init (void);
 125          void UART0_Init (void);
 126          void RerangeTheBufferQueue(unsigned char IndexOfBuffer);
 127          void WirelessModule_Init(void);
 128          void Uart0_SendByte(unsigned char value);
 129          void Uart0_TransmitString(unsigned char * pucString , int iStringSize );
 130          void TIMER0_Init(void);
 131          void TIMER1_Init(unsigned int count);
 132          void Calibration(void);
 133          void Delay_ms(unsigned int count);
 134          void Regulate(void);
 135          void FLASH_ByteWrite (FLADDR addr, char byte, bit SFLE);
 136          unsigned char FLASH_ByteRead (FLADDR addr, bit SFLE);
 137          void FLASH_PageErase (FLADDR addr, bit SFLE);
 138          void SaveMapToFlash(void);
 139          void RestoreMapFromFlash(void);
 140          void Timer3_Init(void);
 141          void Timer4_Init(void);
 142          void UART1_Init (void);
 143          void Uart1_SendByte(unsigned char value);
 144          void PWMChange(unsigned int side_ui, unsigned int PWM_degree);
 145          void TouchKeepAlive(void);
 146          void Acknowledge(unsigned char back);
 147          void LostConnect(void);
 148          void Check_Counter(unsigned int *Counter_L_p, unsigned int *Counter_R_p, unsigned long *Counter_HighBits_a
             -);
 149          void balance_wheel(unsigned int *Counter_L_p, unsigned int *Counter_R_p, unsigned long *Counter_HighBits_a
             -);
 150          //-----------------------------------------------------------------------------
 151          // Global Variables
 152          //-----------------------------------------------------------------------------
 153          
 154          //-------------------------------UART0-----------------------------------------
 155          unsigned int UART0_Receive_Buffer_Size = 0;
 156          unsigned char UART_Receive_Buffer_Queue[UART_BUFFERSIZE]={0};
 157          unsigned char * UART_Receive_Buffer_QueueHead=UART_Receive_Buffer_Queue;
 158          unsigned char * UART_Receive_Buffer_QueueBottom=UART_Receive_Buffer_Queue;
 159          unsigned char UART_Transmit_Buffer_Queue[UART_BUFFERSIZE];
 160          unsigned char * UART_Transmit_Buffer_QueueHead=UART_Transmit_Buffer_Queue;
 161          unsigned char * UART_Transmit_Buffer_QueueBottom=UART_Transmit_Buffer_Queue;
 162          unsigned char TX_Ready =1;
 163          static   char Byte;
 164                           char Rcv_New=0;
 165          //--------------------------------UART1-----------------------------------------
 166          unsigned char   Counter_UART1 = 0;
 167          unsigned char   Flag_NewFrame = 0;
 168          unsigned char   UART1_Receive_Buffer_Queue[UART1_BUFFERSIZE]={0};
 169          unsigned char * UART1_Receive_Buffer_QueueHead   = UART1_Receive_Buffer_Queue;
 170          unsigned char * UART1_Receive_Buffer_QueueBottom  = UART1_Receive_Buffer_Queue;
 171          
 172          
 173          //--------------------------------POSE & Control-------------------------------------------
 174          int a,angle,Temp,w;
 175          int ZeroPoint_a,ZeroPoint_w,ZeroPoint_angle,ZeroPoint_Temp;
 176          int iDeviation = 0;
 177          unsigned int uiAbsoluteDeviation =  0;
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 4   

 178          unsigned int AbsoluteW_ui = 0;
 179          int iStablePoint = 0;
 180          bit RotateDirection = 0;
 181          
 182          int iAngleRange[] = 0;
 183          struct Pair_Angel_Control{
 184                  int Angel;
 185                  int Kp;
 186                  int Ki;
 187                  int Kd;
 188          };
 189          struct Pair_Angel_Control Map_Angel_PID[ANGELRANGE_SIZE] = {{ANGELSCALE_10,5,0,1},\
 190                                                                                                                                          {ANGELSCALE_5,4,0,1},\
 191                                                                                                                                          {ANGELSCALE_3,3,0,1},\
 192                                                                                                                                          {ANGELSCALE0,1,0,1},\
 193                                                                                                                                          {ANGELSCALE3,2,0,1},\
 194                                                                                                                                          {ANGELSCALE5,3,0,1},\
 195                                                                                                                                          {ANGELSCALE10,5,0,1}};
 196          int iCurrentKey = 0;
 197          unsigned int KeepAliveTime_i=0;
 198          char car_state = 0;  //1 = it is go forwarding state now
 199          //-------------------------------Motor--------------------------------
 200          unsigned int Motor1_Time=0;
 201          unsigned int Motor2_Time=0;
 202          
 203          unsigned int PWM1_HighLevelCount=0;
 204          unsigned int PWM1_LowLevelCount=0;
 205          float fPWM1_HighLevelPercent = 0.5f;
 206          bit pwm1_flag=0;
 207          
 208          unsigned int PWM3_HighLevelCount=0;
 209          unsigned int PWM3_LowLevelCount=0;
 210          float fPWM3_HighLevelPercent = 0.9f;
 211          bit pwm3_flag=0;
 212          
 213          unsigned char TH1_HighLevelPrefetch = 0;
 214          unsigned char TL1_HighLevelPrefetch = 0;
 215          unsigned char TMRH3_HighLevelPrefetch = 0;
 216          unsigned char TMRL3_HighLevelPrefetch = 0;
 217          
 218          unsigned char TH1_LowLevelPrefetch = 0;
 219          unsigned char TL1_LowLevelPrefetch = 0;
 220          unsigned char TMRH3_LowLevelPrefetch = 0;
 221          unsigned char TMRL3_LowLevelPrefetch = 0;
 222          
 223          unsigned int uiPWM1Degree=0;
 224          unsigned int uiPWM2Degree=0;
 225          bit     PWM1ChangeOrder = 0;
 226          bit     PWM2ChangeOrder = 0;
 227          
 228          char cOldRotateDirection = 0;
 229          //-------------------------------System--------------------------------
 230          char data Global_SFRPAGE_SAVE;
 231          //unsigned int i=0;
 232          char cDebugTmp=0;
 233          char Control_TimeIsUp = 0;
 234          unsigned char Control_Time=0;
 235          
 236          
 237          unsigned char TH0_Prefetch = 0;
 238          unsigned char TL0_Prefetch = 0;
 239          unsigned char PWM_debug1 = 0;
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 5   

 240          unsigned char PWM_debug2 = 0;
 241          unsigned char PWM_debug3 = 0;
 242          unsigned char PWM_debug4 = 0;
 243          //unsigned int TMR3_1000_circles = 0;
 244          //unsigned int TMR4_1000_circles = 0;
 245          
 246          //-----------------------------------------------------------------------------
 247          // main() Routine
 248          //-----------------------------------------------------------------------------
 249          
 250          void main (void)
 251          {
 252   1              unsigned int Counter_L =0;
 253   1              unsigned int *Counter_L_p = &Counter_L;
 254   1              unsigned int Counter_R = 0;
 255   1              unsigned int *Counter_R_p = &Counter_R;
 256   1              unsigned long Counter_HighBits_a[2] = {0,0};
 257   1              //Initialization
 258   1              SFRPAGE = CONFIG_PAGE;
 259   1              WDTCN = 0xDE;                       // Disable watchdog timer
 260   1              WDTCN = 0xAD;
 261   1              OSCILLATOR_Init();  
 262   1              PORT_Init();                       // Initialize crossbar and GPIO
 263   1              UART0_Init();                      // Initialize UART0
 264   1      //      UART1_Init();
 265   1              WirelessModule_Init();
 266   1              TIMER0_Init();
 267   1              Timer4_Init();
 268   1              Timer3_Init();
 269   1              EA = 1;
 270   1      
 271   1              //*************flash test**********************
 272   1      //      FLASH_PageErase(0x8000,1);
 273   1      //      for(i=0;i<MAP_ADC_ANGEL_SIZE;i++)
 274   1      //      {
 275   1      //              Map_ADC_Angel_array[i].ADC = i;
 276   1      //              Map_ADC_Angel_array[i].Angel = -i;
 277   1      //      }
 278   1      //      SaveMapToFlash();
 279   1      //      FLASH_PageErase(0x8000,1);
 280   1      //      FLASH_ByteWrite(0x8000,'j',1);
 281   1      //      FLASH_ByteWrite(0x8001,'a',1);
 282   1      //      cReadFlash = FLASH_ByteRead(0x8000,1);
 283   1      ////*******************PWM test******************
 284   1      //      uiPWM1Degree = 0;
 285   1      //      while(1)
 286   1      //      {
 287   1      //              uiPWM1Degree +=50;
 288   1      //              PWMChange(1);
 289   1      //              PWMChange(2);
 290   1      //      }
 291   1      ////-------------------PWM test------------------
 292   1              
 293   1              
 294   1      
 295   1      
 296   1              Uart0_TransmitString("Ready",strlen("Ready"));
 297   1              while (1)
 298   1              {
 299   2      //              /******Debug********/
 300   2      //              PWMChange();
 301   2      //              /******End**********/
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 6   

 302   2                      
 303   2                      //if more than 20*50ms=1000ms is past since last message.
 304   2                      if(KeepAliveTime_i > 100)
 305   2                      {
 306   3                              LostConnect();
 307   3                      }
 308   2                      if(UART_Receive_Buffer_QueueHead < UART_Receive_Buffer_QueueBottom)
 309   2                      {
 310   3                              //Uart0_SendByte(*UART_Receive_Buffer_Queue);
 311   3                              //++UART_Receive_Buffer_Queue;
 312   3                              if( 0x53 == *UART_Receive_Buffer_QueueHead )
 313   3                              {
 314   4                                      char WaitFailSign = 0;
 315   4                                      ++UART_Receive_Buffer_QueueHead;
 316   4                                      while( UART_Receive_Buffer_QueueBottom - UART_Receive_Buffer_QueueHead < 3 )
 317   4                                      {
 318   5                                              //wait the rest three char
 319   5                                              if(KeepAliveTime_i > 100)
 320   5                                              {
 321   6                                                      //wait too long 
 322   6                                                      WaitFailSign = 1;
 323   6                                                      break;
 324   6                                              }
 325   5                                      }
 326   4                                      if(WaitFailSign == 1) 
 327   4                                      {
 328   5                                              //wait too long. Abort this frame. 
 329   5                                              UART_Receive_Buffer_QueueHead = UART_Receive_Buffer_QueueHead;
 330   5                                              break;
 331   5                                      }
 332   4                                      
 333   4                                      //check the sum 
 334   4                                      if( *UART_Receive_Buffer_QueueHead + *(UART_Receive_Buffer_QueueHead+1) != *(UART_Receive_Buffer_Queue
             -Head+2) )
 335   4                                      {
 336   5                                              /*debug*/
 337   5                                              Uart0_SendByte('w');
 338   5                                              UART_Receive_Buffer_QueueHead+=3;
 339   5                                              /*debug end*/
 340   5                                              continue;
 341   5                                      }
 342   4                                      
 343   4                                      
 344   4                                      
 345   4                                      //next char (order) come
 346   4                                      car_state = *UART_Receive_Buffer_QueueHead;
 347   4                                      switch(*UART_Receive_Buffer_QueueHead)
 348   4                                      {
 349   5      //                                      case 'g'://start the car
 350   5      //                                              uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1);
 351   5      //                                              PWMChange();
 352   5      //                                              IN11=1;
 353   5      //                                              IN12=0;
 354   5      //                                              IN31=1;
 355   5      //                                              IN32=0;
 356   5      //                                              TouchKeepAlive();
 357   5      //                                              Acknowledge(*UART_Receive_Buffer_QueueHead);
 358   5      //                                              break;
 359   5                                              case 'f'://forward
 360   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1);
 361   5      //                                              PWMChange(1, uiPWM1Degree * 64 -1);     
 362   5      //                                              PWMChange(2, uiPWM2Degree * 64 -1);                                                     
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 7   

 363   5      //                                              IN11=1;
 364   5      //                                              IN12=0;
 365   5      //                                              IN31=1;
 366   5      //                                              IN32=0;
 367   5      //                                              if(uiPWM1Degree > 4)
 368   5      //                                              {
 369   5      //                                                      uiPWM1Degree = 4;
 370   5      //                                              }
 371   5                                                      TouchKeepAlive();
 372   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 373   5                                                      break;
 374   5                                              case 'l'://turn left
 375   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1);
 376   5                                                      PWMChange(1, uiPWM1Degree * 64 -1);     
 377   5                                                      PWMChange(2, uiPWM2Degree * 64 -1);     
 378   5                                                      IN11=0;
 379   5                                                      IN12=0;
 380   5                                                      IN31=1;
 381   5                                                      IN32=0;
 382   5                                                      TouchKeepAlive();
 383   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 384   5                                                      break;
 385   5                                              case 'r'://turn right
 386   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1);
 387   5                                                      PWMChange(1, uiPWM1Degree * 64 -1);     
 388   5                                                      PWMChange(2, uiPWM2Degree * 64 -1);                                             
 389   5                                                      IN11=1;
 390   5                                                      IN12=0;
 391   5                                                      IN31=0;
 392   5                                                      IN32=0;
 393   5                                                      TouchKeepAlive();
 394   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 395   5                                                      break;
 396   5                                              case 'b'://go back
 397   5                                                      uiPWM1Degree=uiPWM2Degree=*(UART_Receive_Buffer_QueueHead+1);
 398   5                                                      PWMChange(1, uiPWM1Degree * 64 -1);     
 399   5                                                      PWMChange(2, uiPWM2Degree * 64 -1);
 400   5                                                      IN11=0;
 401   5                                                      IN12=1;
 402   5                                                      IN31=0;
 403   5                                                      IN32=1;
 404   5                                                      TouchKeepAlive();
 405   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 406   5                                                      break;
 407   5                                              case 's'://stop
 408   5                                                      uiPWM1Degree=uiPWM2Degree=0;
 409   5                                                      PWMChange(1, 0);        
 410   5                                                      PWMChange(2, 0);
 411   5                                                      IN11=0;
 412   5                                                      IN12=0;
 413   5                                                      IN31=0;
 414   5                                                      IN32=0;
 415   5                                                      TouchKeepAlive();
 416   5                                                      Acknowledge(*UART_Receive_Buffer_QueueHead);
 417   5                                                      break;
 418   5                                              default:
 419   5                                                      /*debug*/
 420   5                                                      Acknowledge('n');//No such order
 421   5                                                      /*debug end*/
 422   5                                                      break;                                          
 423   5                                      }
 424   4                                      UART_Receive_Buffer_QueueHead+=3;
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 8   

 425   4                              }
 426   3                              else
 427   3                              {
 428   4                                      ++UART_Receive_Buffer_QueueHead;
 429   4                              }
 430   3                              
 431   3                      }       
 432   2                      // Get the counter information
 433   2                      Check_Counter(Counter_L_p, Counter_R_p, Counter_HighBits_a);
 434   2                      balance_wheel(Counter_L_p, Counter_R_p, Counter_HighBits_a);
 435   2              }
 436   1      }
 437          
 438          //-----------------------------------------------------------------------------
 439          // Initialization Subroutines
 440          //-----------------------------------------------------------------------------
 441          
 442          //-----------------------------------------------------------------------------
 443          // OSCILLATOR_Init
 444          //-----------------------------------------------------------------------------
 445          //
 446          // Return Value : None
 447          // Parameters   : None
 448          //
 449          // This function initializes the system clock to use the PLL as its clock
 450          // source, where the PLL multiplies the external 22.1184MHz crystal by 9/4.
 451          //
 452          //-----------------------------------------------------------------------------
 453          void OSCILLATOR_Init (void)
 454          {
 455   1         int i=0;                              // Software timer
 456   1      
 457   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 458   1      
 459   1         SFRPAGE = CONFIG_PAGE;              // Set SFR page
 460   1      
 461   1         OSCICN = 0x80;                      // Set internal oscillator to run
 462   1                                             // at its slowest frequency
 463   1      
 464   1         CLKSEL = 0x00;                      // Select the internal osc. as
 465   1                                             // the SYSTEMCLOCK source
 466   1      
 467   1         // Initialize external crystal oscillator to use 22.1184 MHz crystal
 468   1      
 469   1         OSCXCN = 0x67;                      // Enable external crystal osc.
 470   1          for(i=0; i < 256; ) // Wait at least 1ms
 471   1              {
 472   2                      i++;
 473   2              }
 474   1         while (!(OSCXCN & 0x80));           // Wait for crystal osc to settle
 475   1      
 476   1         SFRPAGE = LEGACY_PAGE;
 477   1         FLSCL |=  0x30;                     // Initially set FLASH read timing for
 478   1                                             // 100MHz SYSTEMCLOCK (most conservative
 479   1                                             // setting)
 480   1         if (SYSTEMCLOCK <= 25000000L) {           
 481   2         // Set FLASH read timing for <=25MHz
 482   2            FLSCL &= ~0x30;
 483   2         } else if (SYSTEMCLOCK <= 50000000L) {    
 484   2         // Set FLASH read timing for <=50MHz
 485   2            FLSCL &= ~0x20;
 486   2         } else if (SYSTEMCLOCK <= 75000000L) {    
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 9   

 487   2         // Set FLASH read timing for <=75MHz
 488   2            FLSCL &= ~0x10;
 489   2         } else {                            // set FLASH read timing for <=100MHz
 490   2            FLSCL &= ~0x00;
 491   2         }
 492   1      
 493   1         // Start PLL for 50MHz operation
 494   1         SFRPAGE = PLL0_PAGE;
 495   1         PLL0CN = 0x04;                      // Select EXTOSC as clk source
 496   1         PLL0CN |= 0x01;                     // Enable PLL power
 497   1         PLL0DIV = 0x04;                     // Divide by 4
 498   1         PLL0FLT &= ~0x0f;
 499   1         PLL0FLT |=  0x0f;                   // Set Loop Filt for (22/4)MHz input clock
 500   1         PLL0FLT &= ~0x30;                   // Set ICO for 30-60MHz
 501   1         PLL0FLT |=  0x10;
 502   1      
 503   1         PLL0MUL = 0x09;                     // Multiply by 9
 504   1      
 505   1         // wait at least 5us
 506   1         for (i = 0; i < 256; )
 507   1         {
 508   2                 i++;
 509   2         }
 510   1      
 511   1         PLL0CN |= 0x02;                     // Enable PLL
 512   1      
 513   1         while (PLL0CN & 0x10 == 0x00);      // Wait for PLL to lock
 514   1      
 515   1         SFRPAGE = CONFIG_PAGE;
 516   1      
 517   1         CLKSEL = 0x02;                      // Select PLL as SYSTEMCLOCK source
 518   1      
 519   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 520   1      }
 521          
 522          //-----------------------------------------------------------------------------
 523          // PORT_Init
 524          //-----------------------------------------------------------------------------
 525          //
 526          // Return Value : None
 527          // Parameters   : None
 528          //
 529          // This function configures the crossbar and GPIO ports.
 530          //
 531          // P0.0   digital   push-pull     UART TX
 532          // P0.1   digital   open-drain    UART RX
 533          //-----------------------------------------------------------------------------
 534          void PORT_Init (void)
 535          {
 536   1              char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 537   1      
 538   1              SFRPAGE = CONFIG_PAGE;              // Set SFR page
 539   1      
 540   1              XBR0     = 0x04;                    // Enable UART0
 541   1      //      XBR0    |= 0x08;                     // Route CEX0 to P0.2
 542   1              
 543   1              XBR1     = 0x20;                                        //Enable T2
 544   1              XBR2     = 0x40;                    // Enable crossbar and weak pull-up
 545   1              XBR2    |= 0X08;                                        //Enable T4
 546   1              XBR2    |= 0x04;                                        //Enable UART1
 547   1       //   P1MDIN   = 0xFF;                                   
 548   1              P0MDOUT |= 0x04;                    // Set CEX0 (P0.2) to push-pull
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 10  

 549   1              P0MDOUT |= 0x01;                    // Set TX pin to push-pull
 550   1              P0MDOUT |= 0x04;                                        //Set UART1 TX pin to push-pull
 551   1      
 552   1              P3MDOUT = 0x18;                                         // P3.3 P3.4 is  push-pull
 553   1      //      P6MDOUT = 0x60;                                         // P6.x is push-pull
 554   1              P6              &= ~0x80;
 555   1              P6MDOUT = 0xFF;
 556   1              P5MDOUT = 0xFF;                                         //P6 is push-pull
 557   1              P4MDOUT = 0xC3;                                         //P4.7,4.6,4.0,4.1 is push-pull
 558   1      //      P7MDOUT = 0x00;                                         //P7.x is  open-drain
 559   1              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 560   1      }
 561          
 562          //-----------------------------------------------------------------------------
 563          // TIMER0_Init
 564          //-----------------------------------------------------------------------------
 565          //
 566          //
 567          //-----------------------------------------------------------------------------
 568          void TIMER0_Init(void)
 569          {
 570   1      
 571   1              char data SFRPAGE_SAVE =SFRPAGE;
 572   1              SFRPAGE=TIMER01_PAGE;
 573   1              TCON &= ~0x30;//stop the timer0
 574   1              TMOD &= ~0x00;//Set the timer0 work in mode of hex
 575   1              TMOD |= 0x01;
 576   1              CKCON &= 0xf0;
 577   1              CKCON |= 0x02;
 578   1              CKCON &= ~0x08;//Timer 0 uses the clock defined by the prescale bits
 579   1              TR0 = 0;
 580   1              TH0= (0xFFFF-TIMER0CLOCK/20)>>8; //Timer0 cycle = 50ms
 581   1              TL0=  0xFFFF-TIMER0CLOCK/20;
 582   1              ET0 = 1;//Enable interrupt
 583   1              TR0 = 1;//Run Timer0
 584   1              SFRPAGE = SFRPAGE_SAVE;
 585   1      }
 586          
 587          //-----------------------------------------------------------------------------
 588          // TIMER1_Init
 589          //-----------------------------------------------------------------------------
 590          //
 591          // Return Value : None
 592          // Parameters   :
 593          //   1)  int counts - calculated Timer overflow rate
 594          //                    range is postive range of integer: 0 to 32767
 595          //
 596          // Configure Timer1 to auto-reload at interval specified by <counts> (no
 597          // interrupt generated) using SYSCLK as its time base.
 598          //
 599          //-----------------------------------------------------------------------------
 600          //void TIMER1_Init(unsigned int count)
 601          //{
 602          //      char data SFRPAGE_SAVE =SFRPAGE;
 603          //      PWM1_HighLevelCount = count * fPWM1_HighLevelPercent;
 604          //      PWM1_LowLevelCount = (float)count * (1-fPWM1_HighLevelPercent);
 605          //      SFRPAGE=TIMER01_PAGE;
 606          //      TCON &= ~0xC0;//stop the timer1
 607          //      TMOD &= ~0x00;//Set the timer1 work in mode of hex
 608          //      TMOD |= 0x10;
 609          //      
 610          //      CKCON &=0x0f;//clear CKCON bit4~7
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 11  

 611          //      CKCON |= 0x10;//Timer 1 use SYSTEMCLOCK
 612          //      
 613          //      TH1_HighLevelPrefetch = ( 0xffff - (unsigned int) (count * fPWM1_HighLevelPercent) )>>8;
 614          //      TL1_HighLevelPrefetch =   0xffff - (unsigned int) (count * fPWM1_HighLevelPercent) ;
 615          //      TH1_LowLevelPrefetch = (  0xffff - (unsigned int )( count * (1-fPWM1_HighLevelPercent) )  )>>8;
 616          //      TL1_LowLevelPrefetch =    0xffff - (unsigned int) (count * (1-fPWM1_HighLevelPercent));
 617          //      ET1 = 1;//Enable interrupt;
 618          //      TCON |= 0xC0;//start the timer1
 619          //      
 620          //      SFRPAGE = SFRPAGE_SAVE;
 621          //}
 622          
 623          //-----------------------------------------------------------------------------
 624          // TIMER3_Init
 625          //-----------------------------------------------------------------------------
 626          void Timer3_Init(void)
 627          {
 628   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 629   1      
 630   1              SFRPAGE = TMR3_PAGE;                // Set SFR page
 631   1              TMR3CF  = 0x00;
 632   1              TMR3CN  = 0x00;
 633   1              TMR3CN  = 0x02;                                         //Counter mode
 634   1      //      tmp=TMR3CN;
 635   1      //      TMR3CF &= ~0x18;                    // Timer3 uses SYSCLK/12
 636   1              TMR3L = 0x00;                       // Init the Timer3 register
 637   1              TMR3H = 0x00;
 638   1              TMR3CN |= 0x04;                      // Enable Counter3
 639   1      //      ET4 = 1;                            // Timer4 interrupt enabled
 640   1              TR3 = 1;
 641   1              
 642   1              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 643   1      }
 644          void Timer4_Init(void)
 645          {
 646   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 647   1      
 648   1              SFRPAGE = TMR4_PAGE;                // Set SFR page
 649   1              TMR4CF  = 0x00;
 650   1              TMR4CN  = 0x00;
 651   1              TMR4CN  = 0x02;                                         //Counter mode
 652   1      //      tmp=TMR4CN;
 653   1              TMR4L = 0x00;                      
 654   1              TMR4H = 0x00;
 655   1              TMR4CN |= 0x04;                      // Enable Counter4
 656   1      //      ET4 = 1;                            // Timer4 interrupt enabled
 657   1              TR4 = 1;
 658   1              
 659   1              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 660   1      }
 661          //void Timer3_ISR(void) interrupt 14
 662          //{
 663          //      char data SFRPAGE_SAVE =SFRPAGE;//Save current SFP page
 664          //      SFRPAGE = TMR3_PAGE;
 665          //      TMR3Debug = ~TMR3Debug;
 666          
 667          //      
 668          //      if( Control_Time == 0 )
 669          //      {
 670          //              Control_Time = Const_Control_Time;
 671          //              Control_TimeIsUp=1;
 672          ////            /***************Debug Begin***********************/
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 12  

 673          ////            IN31 ^= 1;
 674          ////            //---------------Debug End ---------------------------
 675          //      }
 676          //      else
 677          //      {
 678          //              Control_Time--;
 679          //      }
 680          //      TMR3CN &= ~0x80;//clear interrupt flag
 681          //      SFRPAGE=Global_SFRPAGE_SAVE;
 682          //      SFRPAGE = SFRPAGE_SAVE;
 683          //}
 684          
 685          //-----------------------------------------------------------------------------
 686          // UART0_Init   Variable baud rate, Timer 2, 8-N-1
 687          //-----------------------------------------------------------------------------
 688          //
 689          // Return Value : None
 690          // Parameters   : None
 691          //
 692          // Configure UART0 for operation at <baudrate> 8-N-1 using Timer2 as
 693          // baud rate source.
 694          //
 695          //-----------------------------------------------------------------------------
 696          void UART0_Init (void)
 697          {
 698   1         char SFRPAGE_SAVE;
 699   1      
 700   1         SFRPAGE_SAVE = SFRPAGE;             // Preserve SFRPAGE
 701   1      
 702   1         SFRPAGE = TMR2_PAGE;
 703   1      
 704   1         TMR2CN = 0x00;                      // Timer in 16-bit auto-reload up timer
 705   1                                             // mode
 706   1         TMR2CF = 0x08;                      // SYSCLK is time base; no output;
 707   1                                             // up count only
 708   1         RCAP2 = - ((long) SYSTEMCLOCK/BAUDRATE/16);
 709   1         TMR2 = RCAP2;
 710   1         TR2= 1;                             // Start Timer2
 711   1      
 712   1         SFRPAGE = UART0_PAGE;
 713   1      
 714   1         SCON0 = 0x50;                       // 8-bit variable baud rate;
 715   1                                             // 9th bit ignored; RX enabled
 716   1                                             // clear all flags
 717   1         SSTA0 = 0x15;                       // Clear all flags; enable baud rate
 718   1                                             // doubler (not relevant for these
 719   1                                             // timers);
 720   1                                             // Use Timer2 as RX and TX baud rate
 721   1                                             // source;
 722   1         ES0 = 1;  
 723   1         IP |= 0x10;
 724   1      
 725   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 726   1      }
 727          
 728          
 729          //-----------------------------------------------------------------------------
 730          // Interrupt Service Routines
 731          //-----------------------------------------------------------------------------
 732          
 733          //-----------------------------------------------------------------------------
 734          // Timer0_ISR
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 13  

 735          //-----------------------------------------------------------------------------
 736          //
 737          //
 738          //-----------------------------------------------------------------------------
 739          void Timer0_ISR(void) interrupt 1
 740          {       
 741   1              Global_SFRPAGE_SAVE=SFRPAGE;//Save current SFP page
 742   1              SFRPAGE=CONFIG_PAGE;
 743   1              KeepAliveTime_i++;
 744   1              
 745   1              TF0=0;
 746   1              SFRPAGE=Global_SFRPAGE_SAVE;
 747   1      }
 748          //-----------------------------------------------------------------------------
 749          // Timer1_ISR
 750          //-----------------------------------------------------------------------------
 751          //
 752          //
 753          //-----------------------------------------------------------------------------
 754          //void Timer1_ISR(void) interrupt 3
 755          //{
 756          //      char data SFRPAGE_SAVE =SFRPAGE;//Save current SFP page
 757          //      if(!pwm1_flag)
 758          //      {
 759          //                      
 760          //              //Start of High level
 761          //                      pwm1_flag = 1;  //Set flag
 762          //                      SFRPAGE=CONFIG_PAGE;
 763          //                      PWM1 = 1;       //Set PWM o/p pin
 764          //                      
 765          //                      TH1 = TH1_HighLevelPrefetch;    //Load timer
 766          //                      TL1 = TL1_HighLevelPrefetch;
 767          //                      TF0 = 0;                //Clear interrupt flag
 768          //                      SFRPAGE=SFRPAGE_SAVE;
 769          //                      return;         //Return
 770          //      }
 771          //      else
 772          //      {       //Start of Low level
 773          //              pwm1_flag = 0;  //Clear flag
 774          //              SFRPAGE=CONFIG_PAGE;
 775          //              PWM1 = 0;       //Clear PWM o/p pin
 776          //              
 777          //              TH1 = TH1_LowLevelPrefetch;     //Load timer
 778          //              TL1 = TL1_LowLevelPrefetch;
 779          //              TF0 = 0;        //Clear Interrupt flag
 780          //              
 781          //              SFRPAGE=SFRPAGE_SAVE;
 782          //              return;         //return
 783          //      }
 784          //}
 785          
 786          //void Timer3_ISR(void) interrupt 14
 787          //{
 788          //      char data SFRPAGE_SAVE =SFRPAGE;//Save current SFP page
 789          //      if(!pwm3_flag)
 790          //      {
 791          //                      
 792          //              //Start of High level
 793          //                      pwm3_flag = 1;  //Set flag
 794          //                      SFRPAGE = CONFIG_PAGE;
 795          //                      PWM3 = 1;       //Set PWM o/p pin
 796          //              
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 14  

 797          //                      SFRPAGE = TMR3_PAGE;
 798          //                      TMR3H = TMRH3_HighLevelPrefetch;        //Load timer
 799          //                      TMR3L = TMRL3_HighLevelPrefetch;
 800          //                                              
 801          //                      TF3 = 0;                //Clear interrupt flag
 802          //              
 803          //                      SFRPAGE = SFRPAGE_SAVE;
 804          //                      return;
 805          //      }
 806          //      else
 807          //      {       //Start of Low level
 808          //              pwm3_flag = 0;  //Clear flag
 809          //              
 810          //              SFRPAGE = CONFIG_PAGE;
 811          //              PWM3 = 0;       //Set PWM o/p pin
 812          //              
 813          //              SFRPAGE = TMR3_PAGE;
 814          //              TMR3H = TMRH3_LowLevelPrefetch; //Load timer
 815          //              TMR3L = TMRL3_LowLevelPrefetch;
 816          //              
 817          //              
 818          //              TF3 = 0;        //Clear Interrupt flag
 819          //              
 820          //              SFRPAGE = SFRPAGE_SAVE;
 821          //              return; 
 822          //      }
 823          //}
 824          //-----------------------------------------------------------------------------
 825          // UART0_Interrupt
 826          //-----------------------------------------------------------------------------
 827          //
 828          // This routine is invoked whenever a character is entered or displayed on the
 829          // Hyperterminal.
 830          //
 831          //-----------------------------------------------------------------------------
 832          
 833          void UART0_Interrupt (void) interrupt 4
 834          {
 835   1         SFRPAGE = UART0_PAGE;
 836   1      
 837   1         if ( RI0 == 1 ) //if the buffer is not full
 838   1         {
 839   2            
 840   2                      Byte = SBUF0;                      // Read a character from UART
 841   2                      //if the buffer is't full
 842   2                  if(  (UART_Receive_Buffer_QueueBottom-UART_Receive_Buffer_QueueHead) < UART_BUFFERSIZE )
 843   2                  {
 844   3                          if ( UART_Receive_Buffer_QueueBottom < (UART_Receive_Buffer_Queue+UART_BUFFERSIZE) )
 845   3                              {
 846   4                                      *UART_Receive_Buffer_QueueBottom = Byte; // Store in array
 847   4                                      UART_Receive_Buffer_QueueBottom++;
 848   4                                      if( UART_Receive_Buffer_QueueBottom >= (UART_Receive_Buffer_Queue+UART_BUFFERSIZE) )
 849   4                                              RerangeTheBufferQueue('r');
 850   4                                      Rcv_New=1;//Notice new message come
 851   4                                      UART0_Receive_Buffer_Size++;
 852   4                              }
 853   3                              else
 854   3                                      RerangeTheBufferQueue('r');
 855   3                  }
 856   2                  RI0 = 0;                           // Clear interrupt flag
 857   2         }
 858   1      
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 15  

 859   1         if (TI0 == 1)                   // Check if transmit flag is set
 860   1         {
 861   2                 TX_Ready = 1;
 862   2                 TI0 = 0;
 863   2      //      if ( UART_Transmit_Buffer_QueueHead < UART_Transmit_Buffer_QueueBottom )         // If buffer not 
             -empty
 864   2      //      {
 865   2      ////         Byte = UART_Buffer[UART_Output_First];
 866   2      ////         if ((Byte >= 0x61) && (Byte <= 0x7A)) { // If upper case letter
 867   2      ////            Byte -= 32; }
 868   2      ////                                    int count = UART_Transmit_Buffer_QueueBottom - UART_Transmit_Buffer_QueueHead;
 869   2      ////                                    for(;count>0;count--)
 870   2      ////                                    {
 871   2      ////                                            Uart0_SendByte(*UART_Transmit_Buffer_QueueHead);  // Transmit to Hyperterminal
 872   2      ////                                        UART_Transmit_Buffer_QueueHead++;
 873   2      ////                                    }
 874   2      ////              while( UART_Transmit_Buffer_QueueHead < UART_Transmit_Buffer_QueueBottom )
 875   2      ////              {
 876   2      //                        TI0 = 0;
 877   2      //                        SBUF0 = *UART_Transmit_Buffer_QueueHead;
 878   2      //                        while( !TI0 );
 879   2      //                        ++UART_Transmit_Buffer_QueueHead;
 880   2      ////              }
 881   2      //      }
 882   2      //      else
 883   2      //        {
 884   2      //                TX_Ready = 1;                    // Indicate transmission complete
 885   2      //                TI0 = 0;                           // Clear interrupt flag
 886   2      //        }
 887   2         }
 888   1      }
 889          //-----------------------------------------------------------------------------
 890          // UART1_Interrupt
 891          //-----------------------------------------------------------------------------
 892          //
 893          // This routine is invoked whenever a character is entered or displayed on the
 894          // Hyperterminal.
 895          //
 896          //-----------------------------------------------------------------------------
 897          
 898          
 899          
 900          //-----------------------------------------------------------------------------
 901          // RerangeTheBufferQueue
 902          //-----------------------------------------------------------------------------
 903          //
 904          // This routine is invoked to rerange the UART buffer queue when the bottom point has get to the bottom li
             -mit
 905          //-----------------------------------------------------------------------------
 906          void RerangeTheBufferQueue( char IndexOfBuffer)
 907          {
 908   1              if( IndexOfBuffer == 'r')//rerange the receive buffer
 909   1              {
 910   2                      int count = UART_Receive_Buffer_QueueBottom-UART_Receive_Buffer_QueueHead;
 911   2                      int i=0;
 912   2                      for(i=0;i<count;i++)
 913   2                      {
 914   3                                      *(UART_Receive_Buffer_Queue+i)= UART_Receive_Buffer_QueueHead;
*** WARNING C260 IN LINE 914 OF FlashTestMain.c: '=': pointer truncation
 915   3                                      UART_Receive_Buffer_QueueHead++;
 916   3                                      
 917   3                      }
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 16  

 918   2                      UART_Receive_Buffer_QueueHead=UART_Receive_Buffer_Queue;
 919   2                      UART_Receive_Buffer_QueueBottom=UART_Receive_Buffer_QueueHead+count;
 920   2              }
 921   1              
 922   1              if( IndexOfBuffer == 't')//rerange the transmit buffer
 923   1              {
 924   2                      int count = UART_Transmit_Buffer_QueueBottom-UART_Transmit_Buffer_QueueHead;
 925   2                      int i=0;  
 926   2                      for(i=0;i<count;i++)
 927   2                      {
 928   3                                      *(UART_Transmit_Buffer_Queue+i)= UART_Transmit_Buffer_QueueHead;
*** WARNING C260 IN LINE 928 OF FlashTestMain.c: '=': pointer truncation
 929   3                                      UART_Transmit_Buffer_QueueHead++;
 930   3                                      
 931   3                      }
 932   2                      UART_Transmit_Buffer_QueueHead=UART_Transmit_Buffer_Queue;
 933   2                      UART_Transmit_Buffer_QueueBottom=UART_Transmit_Buffer_QueueHead+count;
 934   2              }       
 935   1      }
 936          //-----------------------------------------------------------------------------
 937          // WirelessModule_Init
 938          //-----------------------------------------------------------------------------
 939          //
 940          //-----------------------------------------------------------------------------
 941          void WirelessModule_Init(void)
 942          {
 943   1              SET=1; // Enter the SET mode of the wireless module
 944   1              memset( UART_Transmit_Buffer_Queue,0,sizeof(UART_Transmit_Buffer_Queue) );
 945   1      }
 946          //-----------------------------------------------------------------------------
 947          // Uart0_SendByte
 948          //-----------------------------------------------------------------------------
 949          //
 950          //-----------------------------------------------------------------------------
 951          void Uart0_SendByte(unsigned char value)
 952          {
 953   1              char data SFRPAGE_SAVE = SFRPAGE;//save current SFR page
 954   1              int i = 0;
 955   1              SFRPAGE = UART0_PAGE;
 956   1      //      //Check if the uart transmit is ready
 957   1      //      while(1)
 958   1      //      {
 959   1      //              if( TI0 == 0 && TX_Ready == 1)
 960   1      //              {
 961   1      //                      break;
 962   1      //              }
 963   1      //      }
 964   1      //      
 965   1      //      //Check if there are enough space
 966   1      //      if( UART_Transmit_Buffer_QueueBottom - UART_Transmit_Buffer_Queue >= UART_BUFFERSIZE )
 967   1      //      {
 968   1      //              RerangeTheBufferQueue('t');
 969   1      //      }
 970   1      //      //Write the Byte to the Transmit queue
 971   1      //      *UART_Transmit_Buffer_QueueBottom = value;
 972   1      //      ++UART_Transmit_Buffer_QueueBottom;
 973   1      //      //Set the TI0 
 974   1      //      TI0 = 1;
 975   1          while( TX_Ready == 0 );
 976   1              
 977   1              TI0 = 0;
 978   1              TX_Ready = 0;
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 17  

 979   1              SBUF0 = value;
 980   1              while(!TX_Ready)
 981   1              {
 982   2                      ;
 983   2              }
 984   1              SFRPAGE = SFRPAGE_SAVE;//Recover the SFR Page
 985   1      }
 986          //-----------------------------------------------------------------------------
 987          // Calibration
 988          //-----------------------------------------------------------------------------
 989          //
 990          //-----------------------------------------------------------------------------
 991          //void Calibration(void)
 992          //{
 993          //      char a_flag = 0,w_flag = 0,angle_flag = 0;
 994          //      UART0_Receive_Buffer_Size = UART_Receive_Buffer_QueueBottom - UART_Receive_Buffer_QueueHead;
 995          ////    strcat(UART_Transmit_Buffer_QueueHead,"ReadyToAdjust");
 996          ////    UART_Transmit_Buffer_QueueBottom += strlen("ReadyToAdjust");
 997          //      Uart0_SendByte('R');
 998          //      
 999          ////    Global_SFRPAGE_SAVE = SFRPAGE;
1000          ////    SFRPAGE = ADC0_PAGE;
1001          ////    TX_Ready = 0;                  // Set the flag to zero
1002          ////    TI0 = 1;                       // Set transmit flag to 1
1003          ////    SFRPAGE = Global_SFRPAGE_SAVE;
1004          //      
1005          //      while(1)
1006          //      {
1007          //              while( Rcv_New == 0 );//Wait for new message
1008          //              Rcv_New = 0;
1009          //              
1010          //              if( *UART_Receive_Buffer_QueueHead++ != 'Z' )
1011          //              {
1012          //                      continue;
1013          //              }
1014          //              else
1015          //              {
1016          //                      while(1)
1017          //                      {
1018          //                              if(UART1_Receive_Buffer_Queue[0]==0x55)      
1019          //                              {  
1020          //                                      switch(UART1_Receive_Buffer_Queue [1])
1021          //                                      {
1022          //                                              case 0x51:
1023          //                                              a = (int)(UART1_Receive_Buffer_Queue [3]<<8| UART1_Receive_Buffer_Queue [2]);
1024          //                                              Temp = (int)(UART1_Receive_Buffer_Queue [9]<<8| UART1_Receive_Buffer_Queue [8]);
1025          //                                              a_flag = 1;
1026          //                                              break;
1027          //                                              case 0x52:
1028          //                                              w = (int)(UART1_Receive_Buffer_Queue [3]<<8| UART1_Receive_Buffer_Queue [2]);
1029          //                                              w_flag = 1;
1030          //                                              break;
1031          //                                              case 0x53:
1032          //                                              angle = (int)((unsigned int)UART1_Receive_Buffer_Queue [3]<<8| UART1_Receive_Buffer_Queue [2]);
1033          //                                              angle_flag = 1;
1034          //                                              break;
1035          //                                      } 
1036          //                              }
1037          //                              
1038          //                              if( a_flag + w_flag + angle_flag == 3 )
1039          //                              {
1040          //                                      break;
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 18  

1041          //                              }
1042          //                      }
1043          //                      
1044          //                      //Save the current state to ZeroPoint
1045          //                      ZeroPoint_a = a;
1046          //                      ZeroPoint_w = w;
1047          //                      ZeroPoint_angle = angle;
1048          //                      ZeroPoint_Temp = Temp;
1049          //                      //
1050          //                      SaveMapToFlash();
1051          //                      return;
1052          //              }
1053          
1054          //      }
1055          //}
1056          
1057          //----------------------------------------------------------------------------
1058          //----------------------------------------------------------------------------
1059          // balance_wheel
1060          //      Input:void
1061          //      Output:void
1062          //      check the whel
1063          //-----------------------------------------------------------------------------
1064          //      Delay_ms
1065          //-----------------------------------------------------------------------------
1066          //      input:count
1067          //      output:void
1068          //      make the Program wait for count ms
1069          //-----------------------------------------------------------------------------
1070          void Delay_ms(unsigned int count)
1071          {
1072   1              unsigned char ii,jj;
1073   1              for(ii=0;ii<count;ii++)
1074   1              {
1075   2                      for(jj=0;jj<250;jj++)
1076   2                              ;
1077   2              }
1078   1      }
1079          
1080          
1081          
1082          
1083          
1084          void Uart0_TransmitString(unsigned char * pucString , int iStringSize )
1085          {
1086   1              unsigned char *pucHeadofString = pucString;
1087   1      //      if( strlen(pucString) != iStringSize )
1088   1      //      {
1089   1      //              ERROR("Uart0_TransmitString():string lenth not match");
1090   1      //      }
1091   1              
1092   1      
1093   1              while( *pucHeadofString != 0 )
1094   1              {
1095   2                      Uart0_SendByte(*pucHeadofString);
1096   2                      ++pucHeadofString;
1097   2              }
1098   1              
1099   1              
1100   1      }
*** WARNING C280 IN LINE 1084 OF FlashTestMain.c: 'iStringSize': unreferenced local variable
1101          
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 19  

1102          void PWMChange(unsigned int side_ui, unsigned int PWM_degree)
1103          {
1104   1              char data SFRPAGE_SAVE =SFRPAGE;
1105   1              int i= 0;
1106   1              /*************************DEBUG BEGIN*************************/
1107   1              if( PWM_degree > 256 )
1108   1              {
1109   2                      ERROR("function PWMChange():PWM_degree is too large");
1110   2              }
1111   1      //      PWM_debug1 = (unsigned char)uiPWM1Degree;
1112   1      //      PWM_debug2 = (unsigned char)uiPWM2Degree << 4;
1113   1      //      PWM_debug3  = (unsigned char)uiPWM1Degree + (unsigned char)uiPWM2Degree << 4;
1114   1      //      PWM_debug4 = PWM_debug1 + PWM_debug2;
1115   1              //------------------------DEBUG END-------------------------------
1116   1              SFRPAGE = CONFIG_PAGE;
1117   1              P5 = PWM_degree;
1118   1              SFRPAGE = SFRPAGE_SAVE;
1119   1      
1120   1              if(side_ui == 1)
1121   1              {
1122   2                      PWM1CHANGEORDER =  0;
1123   2                      while( PWM1CHANGEORDER != 0 );//wait
1124   2                      PWM1CHANGEORDER =  1;
1125   2              }
1126   1              else if(side_ui == 2)
1127   1              {
1128   2                      PWM2CHANGEORDER =  0;
1129   2                      while( PWM2CHANGEORDER != 0 );//wait
1130   2                      PWM2CHANGEORDER =  1;
1131   2              }
1132   1      }
1133          void TouchKeepAlive(void)
1134          {
1135   1              char data SFRPAGE_SAVE =SFRPAGE;
1136   1              SFRPAGE=TIMER01_PAGE;
1137   1              KeepAliveTime_i = 0;
1138   1              ET0 = 1;//Enable Timer0 interrupt
1139   1              TR0 = 1;//Run Timer0
1140   1              SFRPAGE = SFRPAGE_SAVE;
1141   1      }
1142          void LostConnect(void)
1143          {
1144   1              uiPWM1Degree=uiPWM2Degree=0;
1145   1              PWMChange(1, 0);        
1146   1              PWMChange(2, 0);
1147   1              IN11=0;
1148   1              IN12=0;
1149   1              IN31=0;
1150   1              IN32=0;
1151   1      //      Uart0_TransmitString("lost connect",strlen("lost connect"));
1152   1      //      Acknowledge('s');
1153   1      }
1154          void Acknowledge(unsigned char back)
1155          {
1156   1      Uart0_SendByte(0x54);
1157   1              Uart0_SendByte(back);
1158   1              Uart0_SendByte(1);
1159   1              Uart0_SendByte(back+1);
1160   1              
1161   1              
1162   1      }
1163          void balance_wheel(unsigned int *Counter_L_p, unsigned int *Counter_R_p, unsigned long *Counter_HighBits_a
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 20  

             -)
1164          {
1165   1              char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
1166   1              static long CHG_Times = 0;
1167   1              static char last_order = 0;
1168   1              static unsigned int PWM1_degree = 0;
1169   1              static unsigned int PWM2_degree = 0;
1170   1              static unsigned int average_degree = 0;
1171   1              static char Enough_circle_to_balance = 0;
1172   1              double average_count_d = 0.0;
1173   1              if(car_state != 'f')
1174   1              {
1175   2                      if(car_state != last_order)
1176   2                      {
1177   3                              last_order = car_state;
1178   3                      }
1179   2                      return;
1180   2              }
1181   1              if(last_order != 'f')
1182   1              {
1183   2                      //This is the start of forwarding
1184   2                      last_order = 'f';
1185   2                      // Clear wheels' count
1186   2                      *Counter_L_p = 0;
1187   2                      *Counter_R_p = 0;
1188   2                      *Counter_HighBits_a = 0;
1189   2                      *(Counter_HighBits_a + 1) = 0;
1190   2                      Enough_circle_to_balance = 0;
1191   2                      CHG_Times = 0;
1192   2                      // Change the pwm
1193   2                      PWM1_degree = uiPWM1Degree * 64 -1;
1194   2                      PWM2_degree = uiPWM1Degree * 64 -1;
1195   2                      average_degree = (PWM1_degree + PWM2_degree) / 2.0;
1196   2                      PWMChange(1, PWM1_degree);      
1197   2                      PWMChange(2, PWM2_degree);
1198   2                      IN11=1;
1199   2                      IN12=0;
1200   2                      IN31=1;
1201   2                      IN32=0;
1202   2                      return;
1203   2              }
1204   1              else
1205   1              {
1206   2                      //check the counter
1207   2                      Check_Counter(Counter_L_p, Counter_R_p, Counter_HighBits_a);
1208   2                      if(Enough_circle_to_balance || ADJUST_THRESHOLD < *Counter_L_p || ADJUST_THRESHOLD < * Counter_R_p)
1209   2                      {
1210   3                              Enough_circle_to_balance = 1;
1211   3                              /*      
1212   3                                      1.Change The PWM every PWM_CHG_GAP count.
1213   3                                      2. proportional to wheel circle counts:PWM1 /PWM2 = dist1/dist2
1214   3                              */
1215   3                              if(*Counter_L_p / PWM_CHG_GAP > CHG_Times || *Counter_R_p / PWM_CHG_GAP > CHG_Times)
1216   3                              {
1217   4                                      CHG_Times = *Counter_L_p / PWM_CHG_GAP;
1218   4                                      average_count_d = *Counter_L_p /2.0 + *Counter_R_p / 2.0;
1219   4                                      PWM1_degree = *Counter_L_p / average_count_d * average_degree;
1220   4                                      PWM2_degree = *Counter_R_p / average_count_d * average_degree;
1221   4                                      PWMChange(1, PWM1_degree);
1222   4                                      PWMChange(2, PWM2_degree);
1223   4                                      if(*Counter_L_p > 500 || *Counter_R_p > 500)
1224   4                                      {
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 21  

1225   5                                              SFRPAGE = TMR4_PAGE;                // Set SFR page
1226   5                                              TMR4L = 0;
1227   5                                              TMR4H = 0;
1228   5                                              SFRPAGE = TMR3_PAGE;                // Set SFR page
1229   5                                              TMR3H = 0;
1230   5                                              TMR3L = 0;
1231   5                                              SFRPAGE = SFRPAGE_SAVE;
1232   5                                              *Counter_L_p = 0;
1233   5                                              *Counter_R_p = 0;
1234   5                                              *Counter_HighBits_a = 0;
1235   5                                              *(Counter_HighBits_a + 1) = 0;
1236   5                                              Enough_circle_to_balance = 0;
1237   5                                              CHG_Times = 0;
1238   5      
1239   5                                      }
1240   4                              }
1241   3                      }
1242   2                      return;
1243   2              }
1244   1      }
1245          
1246          void Check_Counter(unsigned int *Counter_L_p, unsigned int *Counter_R_p, unsigned long *Counter_HighBits_a
             -)
1247          {
1248   1      #ifndef CHECK_COUNTER_DEBUG
1249   1              static unsigned int c_L = 0;
1250   1              static unsigned int c_R = 0;
1251   1                                              char debug = 0;
1252   1      #endif
1253   1              char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
1254   1              SFRPAGE = TMR4_PAGE;                // Set SFR page
1255   1              *Counter_R_p = TMR4H;
1256   1              *Counter_R_p = *Counter_R_p << 8;
1257   1              *Counter_R_p += TMR4L;
1258   1              SFRPAGE = TMR3_PAGE;                // Set SFR page
1259   1              *Counter_L_p = TMR3H;
1260   1              *Counter_L_p = *Counter_L_p << 8;
1261   1              *Counter_L_p += TMR3L;
1262   1              
1263   1              if(*Counter_L_p >= 50000)
1264   1              {
1265   2                      TMR3H = 0;
1266   2                      TMR3L = 0;
1267   2                      *Counter_L_p = 0;
1268   2                      ++*(Counter_HighBits_a);
1269   2              }
1270   1              if(*Counter_R_p >= 50000)
1271   1              {
1272   2                      SFRPAGE = TMR4_PAGE;                // Set SFR page
1273   2                      TMR4H = 0;
1274   2                      TMR4L = 0;
1275   2                      *Counter_R_p = 0;
1276   2                      ++*(Counter_HighBits_a+1);
1277   2              }
1278   1              
1279   1      #ifndef CHECK_COUNTER_DEBUG
1280   1              if(*Counter_L_p > c_L )
1281   1              {
1282   2                      c_L = *Counter_L_p;
1283   2              }
1284   1              if(*Counter_R_p > c_R )
1285   1              {
C51 COMPILER V9.53.0.0   FLASHTESTMAIN                                                     11/15/2015 17:52:29 PAGE 22  

1286   2                      c_R = *Counter_R_p;
1287   2              }
1288   1              if(*Counter_R_p > 50)
1289   1              {
1290   2                      c_R = *Counter_R_p;
1291   2              }
1292   1      //      if( TMR3_1000_circles > 0 )
1293   1      //      {
1294   1      //              debug ++; 
1295   1      //      }
1296   1      #endif
1297   1              SFRPAGE = SFRPAGE_SAVE;
1298   1      }
1299          
1300          //-----------------------------------------------------------------------------
1301          // End Of File
1302          //-----------------------------------------------------------------------------
*** WARNING C294 IN LINE 482 OF FlashTestMain.c: unreachable code
*** WARNING C294 IN LINE 488 OF FlashTestMain.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3391    ----
   CONSTANT SIZE    =     59    ----
   XDATA SIZE       =    320      59
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
