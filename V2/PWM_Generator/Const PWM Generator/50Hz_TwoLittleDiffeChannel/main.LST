C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F12x_UART0_Interrupt.c
   3          //-----------------------------------------------------------------------------
   4          // ????????????? RJ ?? ???????
   5          // ???????:     http://dadastudio.taobao.com/ 
   6          // ????????      C8051F12x-13x???.pdf ?? 21 ?:UART0
   7          //
   8          // Copyright 2006 Silicon Laboratories, Inc.
   9          // http://www.silabs.com
  10          //
  11          // Program Description:
  12          //
  13          // This program demonstrates how to configure the C8051F120 to write to and read 
  14          // from the UART interface. The program reads a word using the UART0 interrupts 
  15          // and outputs that word to the screen, with all characters in uppercase
  16          //
  17          // How To Test:
  18          //
  19          // 1) Download code to a 'F12x device that is connected to a UART transceiver
  20          // 2) Verify jumpers J6 and J9 are populated on the 'F12x TB.
  21          // 3) Connect serial cable from the transceiver to a PC
  22          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  23          //    to the COM port at <BAUDRATE> and 8-N-1
  24          // 5) Download and execute code on an 'F12x target board.
  25          // 6) Type up to 64 characters into the Terminal and press Enter.  The MCU 
  26          //    will then print back the characters that were typed
  27          //   
  28          //
  29          // Target:         C8051F12x
  30          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  31          // Command Line:   None
  32          //
  33          // Release 1.0
  34          //    -Initial Revision (SM)
  35          //    -11 JULY 2007
  36          //
  37          
  38          
  39          //-----------------------------------------------------------------------------
  40          // Includes
  41          //-----------------------------------------------------------------------------
  42          
  43          #include <c8051f120.h>                 // SFR declarations
  44          #include <stdio.h>                     
  45          #include <string.h>
  46          //-----------------------------------------------------------------------------
  47          // 16-bit SFR Definitions for 'F12x
  48          //-----------------------------------------------------------------------------
  49          
  50          sfr16 RCAP2    = 0xca;                 // Timer2 capture/reload
  51          sfr16 TMR2     = 0xcc;                 // Timer2
  52          
  53          //-----------------------------------------------------------------------------
  54          // Global Constants
  55          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 2   

  56          
  57          #define BAUDRATE     9600            // Baud rate of UART in bps
  58          
  59          // SYSTEMCLOCK = System clock frequency in Hz
  60          #define SYSTEMCLOCK       (22118400L * 9 / 4)
  61          
  62          //-----------------------------------------------------------------------------
  63          // Function Prototypes
  64          //-----------------------------------------------------------------------------
  65          
  66          void OSCILLATOR_Init (void);         
  67          void PORT_Init (void);
  68          void UART0_Init (void);
  69          void RerangeTheBufferQueue(void);
  70          void WirelessModule_Init(void);
  71          void Uart0_SendByte(unsigned char value);
  72          void TIMER0_Init(unsigned int count);
  73          void TIMER1_Init(unsigned int count);
  74          
  75          //-----------------------------------------------------------------------------
  76          // Global Variables
  77          //-----------------------------------------------------------------------------
  78          
  79          #define UART_BUFFERSIZE 64
  80          unsigned char UART_Buffer_Queue[UART_BUFFERSIZE];
  81          unsigned char * UART_Buffer_QueueHead=UART_Buffer_Queue;
  82          unsigned char * UART_Buffer_QueueBottom=UART_Buffer_Queue;
  83          unsigned char TX_Ready =1;
  84          static char Byte;
  85          char TxOrder = 0;
  86          unsigned char TxByte = 0;
  87          //----------------------PWM----------------------------------------------------
  88          #define MOTOR_SPEED_DEGREE = 16;
  89          //unsigned int Motor_speed_degree[16][
  90          float PWM1_HighLevelPercent = 0.5;
  91          float PWM3_HighLevelPercent = 0.5;
  92          sbit PWM1       =       P4^4;                      
  93          sbit PWM3   =   P3^4;
  94          bit pwm1_flag=0;
  95          bit pwm3_flag=0;
  96          unsigned int PWM1_HighLevelCount=0;
  97          unsigned int PWM1_LowLevelCount=0;
  98          unsigned int PWM3_HighLevelCount=0;
  99          unsigned int PWM3_LowLevelCount=0;
 100          unsigned char PWM_Degree_uc = 0;
 101          //---------------------------Timer---------------------------------------------
 102          unsigned int TH0_high_pre =  0;
 103          unsigned int TL0_high_pre =  0;
 104          unsigned int TH0_low_pre =  0;
 105          unsigned int TL0_low_pre =  0;
 106          
 107          unsigned int TH1_high_pre =  0;
 108          unsigned int TL1_high_pre =  0;
 109          unsigned int TH1_low_pre =  0;
 110          unsigned int TL1_low_pre =  0;
 111          
 112          unsigned int Timer0_itrp_count = 0;
 113          unsigned int Timer1_itrp_count = 0;
 114          #define TIMER0_ITRP_THRESHOLD (2000/50)
 115          #define TIMER1_ITRP_THRESHOLD (2000/25)
 116          //-----------------------------------------------------------------------------
 117          // main() Routine
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 3   

 118          //-----------------------------------------------------------------------------
 119          
 120          void main (void)
 121          {
 122   1         int count = 0;
 123   1         SFRPAGE = CONFIG_PAGE;
 124   1      
 125   1         WDTCN = 0xDE;                       // Disable watchdog timer
 126   1         WDTCN = 0xAD;
 127   1      
 128   1         OSCILLATOR_Init ();                 // Initialize oscillator
 129   1         PORT_Init ();                       // Initialize crossbar and GPIO
 130   1              TIMER0_Init(SYSTEMCLOCK/12/2000);
 131   1              TIMER1_Init(SYSTEMCLOCK/12/2000);
 132   1      
 133   1      //   UART0_Init ();                      // Initialize UART0
 134   1      //   WirelessModule_Init();
 135   1         EA = 1;
 136   1      
 137   1              count = SYSTEMCLOCK/12/2000;
 138   1              PWM1_HighLevelCount = count * (1-PWM1_HighLevelPercent);
 139   1              PWM1_LowLevelCount = (float)count * PWM1_HighLevelPercent;
 140   1              PWM3_HighLevelCount = count * (1-PWM3_HighLevelPercent);
 141   1              PWM3_LowLevelCount = (float)count * PWM3_HighLevelPercent;
 142   1              TH0_high_pre = (0xFFFF-PWM3_HighLevelCount)>>8;
 143   1              TL0_high_pre = (0xFFFF-PWM1_HighLevelCount);
 144   1              TH0_low_pre = (0xFFFF-PWM1_LowLevelCount)>>8;
 145   1              TL0_low_pre = (0xFFFF-PWM1_LowLevelCount);
 146   1              TH1_high_pre = (0xFFFF-PWM3_HighLevelCount)>>8;
 147   1              TL1_high_pre = (0xFFFF-PWM3_HighLevelCount);
 148   1              TH1_low_pre = (0xFFFF-PWM3_LowLevelCount)>>8;   
 149   1              TL1_low_pre = (0xFFFF-PWM3_LowLevelCount);
 150   1      
 151   1              //**Debug**
 152   1              
 153   1              //**End Debug**
 154   1         while (1)
 155   1         {
 156   2                 ;
 157   2         }
 158   1      }
 159          
 160          //-----------------------------------------------------------------------------
 161          // Initialization Subroutines
 162          //-----------------------------------------------------------------------------
 163          
 164          //-----------------------------------------------------------------------------
 165          // OSCILLATOR_Init
 166          //-----------------------------------------------------------------------------
 167          //
 168          // Return Value : None
 169          // Parameters   : None
 170          //
 171          // This function initializes the system clock to use the PLL as its clock
 172          // source, where the PLL multiplies the external 22.1184MHz crystal by 9/4.
 173          //
 174          //-----------------------------------------------------------------------------
 175          void OSCILLATOR_Init (void)
 176          {
 177   1         int i;                              // Software timer
 178   1      
 179   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 4   

 180   1      
 181   1         SFRPAGE = CONFIG_PAGE;              // Set SFR page
 182   1      
 183   1         OSCICN = 0x80;                      // Set internal oscillator to run
 184   1                                             // at its slowest frequency
 185   1      
 186   1         CLKSEL = 0x00;                      // Select the internal osc. as
 187   1                                             // the SYSTEMCLOCK source
 188   1      
 189   1         // Initialize external crystal oscillator to use 22.1184 MHz crystal
 190   1      
 191   1         OSCXCN = 0x67;                      // Enable external crystal osc.
 192   1         for (i=0; i < 256; i++);            // Wait at least 1ms
 193   1      
 194   1         while (!(OSCXCN & 0x80));           // Wait for crystal osc to settle
 195   1      
 196   1         SFRPAGE = LEGACY_PAGE;
 197   1         FLSCL |=  0x30;                     // Initially set FLASH read timing for
 198   1                                             // 100MHz SYSTEMCLOCK (most conservative
 199   1                                             // setting)
 200   1         if (SYSTEMCLOCK <= 25000000) {           
 201   2         // Set FLASH read timing for <=25MHz
 202   2            FLSCL &= ~0x30;
 203   2         } else if (SYSTEMCLOCK <= 50000000) {    
 204   2         // Set FLASH read timing for <=50MHz
 205   2            FLSCL &= ~0x20;
 206   2         } else if (SYSTEMCLOCK <= 75000000) {    
 207   2         // Set FLASH read timing for <=75MHz
 208   2            FLSCL &= ~0x10;
 209   2         } else {                            // set FLASH read timing for <=100MHz
 210   2            FLSCL &= ~0x00;
 211   2         }
 212   1      
 213   1         // Start PLL for 50MHz operation
 214   1         SFRPAGE = PLL0_PAGE;
 215   1         PLL0CN = 0x04;                      // Select EXTOSC as clk source
 216   1         PLL0CN |= 0x01;                     // Enable PLL power
 217   1         PLL0DIV = 0x04;                     // Divide by 4
 218   1         PLL0FLT &= ~0x0f;
 219   1         PLL0FLT |=  0x0f;                   // Set Loop Filt for (22/4)MHz input clock
 220   1         PLL0FLT &= ~0x30;                   // Set ICO for 30-60MHz
 221   1         PLL0FLT |=  0x10;
 222   1      
 223   1         PLL0MUL = 0x09;                     // Multiply by 9
 224   1      
 225   1         // wait at least 5us
 226   1         for (i = 0; i < 256; i++) ;
 227   1      
 228   1         PLL0CN |= 0x02;                     // Enable PLL
 229   1      
 230   1         while (PLL0CN & 0x10 == 0x00);      // Wait for PLL to lock
 231   1      
 232   1         SFRPAGE = CONFIG_PAGE;
 233   1      
 234   1         CLKSEL = 0x02;                      // Select PLL as SYSTEMCLOCK source
 235   1      
 236   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 237   1      }
 238          
 239          
 240          //-----------------------------------------------------------------------------
 241          // PORT_Init
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 5   

 242          //-----------------------------------------------------------------------------
 243          //
 244          // Return Value : None
 245          // Parameters   : None
 246          //
 247          // This function configures the crossbar and GPIO ports.
 248          //
 249          // P0.0   digital   push-pull     UART TX
 250          // P0.1   digital   open-drain    UART RX
 251          //-----------------------------------------------------------------------------
 252          void PORT_Init (void)
 253          {
 254   1              char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 255   1      
 256   1              SFRPAGE = CONFIG_PAGE;              // Set SFR page
 257   1      
 258   1              XBR0     = 0x04;                    // Enable UART0
 259   1              XBR1     = 0x00;
 260   1              XBR2     = 0x40;                    // Enable crossbar and weak pull-up
 261   1                                             
 262   1      
 263   1              P0MDOUT |= 0x01;                    // Set TX pin to push-pull
 264   1              P1MDOUT |= 0x40;                    // Set P1.6(LED) to push-pull
 265   1              P3MDOUT |= 0x10;                                                // P3.4 is push-pull
 266   1              P4MDOUT |= 0x10;                                        // P4.4. is push-pull
 267   1              P5MDOUT = 0xFF;                                         // P5.x is push-pull
 268   1              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 269   1      }
 270          
 271          
 272          //-----------------------------------------------------------------------------
 273          // UART0_Init   Variable baud rate, Timer 2, 8-N-1
 274          //-----------------------------------------------------------------------------
 275          //
 276          // Return Value : None
 277          // Parameters   : None
 278          //
 279          // Configure UART0 for operation at <baudrate> 8-N-1 using Timer2 as
 280          // baud rate source.
 281          //
 282          //-----------------------------------------------------------------------------
 283          void UART0_Init (void)
 284          {
 285   1         char SFRPAGE_SAVE;
 286   1      
 287   1         SFRPAGE_SAVE = SFRPAGE;             // Preserve SFRPAGE
 288   1      
 289   1         SFRPAGE = TMR2_PAGE;
 290   1      
 291   1         TMR2CN = 0x00;                      // Timer in 16-bit auto-reload up timer
 292   1                                             // mode
 293   1         TMR2CF = 0x08;                      // SYSCLK is time base; no output;
 294   1                                             // up count only
 295   1         RCAP2 = - ((long) SYSTEMCLOCK/BAUDRATE/16);
 296   1         TMR2 = RCAP2;
 297   1         TR2= 1;                             // Start Timer2
 298   1      
 299   1         SFRPAGE = UART0_PAGE;
 300   1      
 301   1         SCON0 = 0x50;                       // 8-bit variable baud rate;
 302   1                                             // 9th bit ignored; RX enabled
 303   1                                             // clear all flags
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 6   

 304   1         SSTA0 = 0x15;                       // Clear all flags; enable baud rate
 305   1                                             // doubler (not relevant for these
 306   1                                             // timers);
 307   1                                             // Use Timer2 as RX and TX baud rate
 308   1                                             // source;
 309   1         ES0 = 1;  
 310   1         IP |= 0x10;
 311   1      
 312   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 313   1      }
 314          
 315          
 316          //-----------------------------------------------------------------------------
 317          // Interrupt Service Routines
 318          //-----------------------------------------------------------------------------
 319          
 320          //-----------------------------------------------------------------------------
 321          // UART0_Interrupt
 322          //-----------------------------------------------------------------------------
 323          //
 324          // This routine is invoked whenever a character is entered or displayed on the
 325          // Hyperterminal.
 326          //
 327          //-----------------------------------------------------------------------------
 328          
 329          void UART0_Interrupt (void) interrupt 4
 330          {
 331   1         SFRPAGE = UART0_PAGE;
 332   1      
 333   1         if ( RI0 == 1 && (UART_Buffer_QueueBottom-UART_Buffer_Queue) < UART_BUFFERSIZE ) //if the buffer is not
             - full
 334   1         {
 335   2            RI0 = 0;                           // Clear interrupt flag
 336   2            Byte = SBUF0;                      // Read a character from UART
 337   2      
 338   2            if ( UART_Buffer_QueueBottom < (UART_Buffer_Queue+UART_BUFFERSIZE) )
 339   2            {
 340   3                              *UART_Buffer_QueueBottom = Byte; // Store in array
 341   3                              UART_Buffer_QueueBottom++;
 342   3                              if( UART_Buffer_QueueBottom >= (UART_Buffer_Queue+UART_BUFFERSIZE) )
 343   3                                      RerangeTheBufferQueue();
 344   3            }
 345   2                else
 346   2                        RerangeTheBufferQueue();
 347   2         }
 348   1      
 349   1         if (TI0 == 1)                   // Check if transmit flag is set
 350   1         {
 351   2                 TI0 = 0;
 352   2                 if(TxOrder == 1)
 353   2                 {
 354   3                         TxOrder = 0;
 355   3                         SBUF0 = TxByte;
 356   3                 }
 357   2                 else
 358   2                 {
 359   3                         TX_Ready = 1;
 360   3                 }
 361   2              }
 362   1      }
 363          
 364          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 7   

 365          // RerangeTheBufferQueue
 366          //-----------------------------------------------------------------------------
 367          //
 368          // This routine is invoked to rerange the UART buffer queue when the bottom point has get to the bottom li
             -mit
 369          //-----------------------------------------------------------------------------
 370          void RerangeTheBufferQueue(void)
 371          {
 372   1                      int count = UART_Buffer_QueueBottom-UART_Buffer_QueueHead;
 373   1                      int i=0;
 374   1                      for(i=0;i<count;i++)
 375   1                      {
 376   2                                      *(UART_Buffer_Queue+i)= UART_Buffer_QueueHead;
*** WARNING C260 IN LINE 376 OF main.c: '=': pointer truncation
 377   2                                      UART_Buffer_QueueHead++;
 378   2                                      
 379   2                      }
 380   1                      UART_Buffer_QueueHead=UART_Buffer_Queue;
 381   1                      UART_Buffer_QueueBottom=UART_Buffer_QueueHead+count;
 382   1      }
 383          //-----------------------------------------------------------------------------
 384          // WirelessModule_Init
 385          //-----------------------------------------------------------------------------
 386          //
 387          //-----------------------------------------------------------------------------
 388          void WirelessModule_Init(void)
 389          {
 390   1              P3 = 0xFF; // Enter the SET mode of the wireless module
 391   1              strcat(UART_Buffer_Queue,"helloworld");
 392   1              UART_Buffer_QueueBottom += strlen("helloworld");
 393   1      }
 394          //-----------------------------------------------------------------------------
 395          // Uart0_SendByte
 396          //-----------------------------------------------------------------------------
 397          //
 398          //-----------------------------------------------------------------------------
 399          void Uart0_SendByte(unsigned char value)
 400          {
 401   1              char data SFRPAGE_SAVE = SFRPAGE;//save current SFR page
 402   1              SFRPAGE = UART0_PAGE;
 403   1              
 404   1              while(!TX_Ready);
 405   1              TX_Ready = 0;
 406   1              TxOrder = 1;
 407   1              TxByte = value;
 408   1              TI0=1;
 409   1              
 410   1              
 411   1              SFRPAGE = SFRPAGE_SAVE;//Recover the SFR Page
 412   1      }
 413          void TIMER0_Init(unsigned int count)
 414          {
 415   1      
 416   1              char data SFRPAGE_SAVE =SFRPAGE;
 417   1              PWM1_HighLevelCount = count * (1-PWM1_HighLevelPercent);
 418   1              PWM1_LowLevelCount = (float)count * PWM1_HighLevelPercent;
 419   1              SFRPAGE=TIMER01_PAGE;
 420   1              TCON &= ~0x30;//stop the timer0
 421   1              TMOD &= ~0x00;//Set the timer0 work in mode of hex
 422   1              TMOD |= 0x01;
 423   1              CKCON &= ~0x0F; //clear Timer0 part 
 424   1              CKCON &= ~0x03;// SysClk/12
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 8   

 425   1              TR0 = 0;
 426   1              TH0 = count;
 427   1              TL0 = count;
 428   1              ET0 = 1;
 429   1              TR0 =1;
 430   1              SFRPAGE = SFRPAGE_SAVE;
 431   1      }
 432          void TIMER1_Init(unsigned int count)
 433          {
 434   1              char data SFRPAGE_SAVE =SFRPAGE;
 435   1              PWM3_HighLevelCount = count * (1-PWM3_HighLevelPercent);
 436   1              PWM3_LowLevelCount = (float)count * PWM3_HighLevelPercent;
 437   1              SFRPAGE=TIMER01_PAGE;
 438   1              TCON &= ~0xC0;//stop timer1 ,clear TF1
 439   1              
 440   1              TMOD &= ~0x30;//Set the timer1 work in mode of hex
 441   1              TMOD |= 0x10;
 442   1              CKCON &= ~0x10;//Use SCA0~SCA1
 443   1              TR1 = 0;
 444   1              TH1 = count;
 445   1              TL1 = count;
 446   1              ET1 = 1;
 447   1              TR1 =1;
 448   1              SFRPAGE = SFRPAGE_SAVE;
 449   1      }
 450          void Timer0_ISR(void) interrupt 1
 451          {
 452   1              char data SFRPAGE_SAVE =SFRPAGE;
 453   1              SFRPAGE=TIMER01_PAGE;
 454   1              ++ Timer0_itrp_count;
 455   1              if(!pwm1_flag)
 456   1              {
 457   2                      //Start of High level
 458   2                              if(Timer0_itrp_count >=  TIMER0_ITRP_THRESHOLD)
 459   2                              {
 460   3                                      Timer0_itrp_count = 0;
 461   3                                      pwm1_flag = 1;  //Set flag
 462   3                                      SFRPAGE = CONFIG_PAGE;
 463   3                                      PWM1 = 1;       //Set PWM o/p pin
 464   3                                      SFRPAGE=TIMER01_PAGE;
 465   3                              }
 466   2      //                      TH0 = (0xFFFF-PWM1_HighLevelCount)>>8;  //Load timer
 467   2      //                      TL0 = (0xFFFF-PWM1_HighLevelCount);
 468   2                              TH0 = TH0_high_pre;
 469   2                              TL0 = TL0_high_pre;
 470   2                              TF0 = 0;                //Clear interrupt flag
 471   2                              return;         //Return
 472   2              }
 473   1              else
 474   1              {       //Start of Low level
 475   2                      if(Timer0_itrp_count >=  TIMER0_ITRP_THRESHOLD)
 476   2                      {
 477   3                              Timer0_itrp_count = 0;
 478   3                              pwm1_flag = 0;  //Clear flag
 479   3                              SFRPAGE = CONFIG_PAGE;
 480   3                              PWM1 = 0;       //Clear PWM o/p pin
 481   3                              SFRPAGE=TIMER01_PAGE;
 482   3                      }
 483   2              
 484   2      //              TH0 = (0xFFFF-PWM1_LowLevelCount)>>8;   //Load timer
 485   2      //              TL0 = (0xFFFF-PWM1_LowLevelCount);
 486   2                      TH0 = TH0_low_pre;
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 9   

 487   2                      TL0 = TL0_low_pre;
 488   2                      TF0 = 0;        //Clear Interrupt flag
 489   2                      return;         //return
 490   2              }       
 491   1              TF0 = 0;                //Clear interrupt flag
 492   1              SFRPAGE = SFRPAGE_SAVE;
 493   1      }
 494          void Timer1_ISR(void) interrupt 3
 495          {
 496   1              char data SFRPAGE_SAVE =SFRPAGE;
 497   1              SFRPAGE=TIMER01_PAGE;
 498   1              ++ Timer1_itrp_count;
 499   1              if(!pwm3_flag)
 500   1              {
 501   2                      //Start of High level
 502   2      
 503   2      //                      TH1 = (0xFFFF-PWM3_HighLevelCount)>>8;  //Load timer
 504   2      //                      TL1 = (0xFFFF-PWM3_HighLevelCount);
 505   2                              TH1 = TH1_high_pre;
 506   2                              TL1 = TL1_high_pre;
 507   2                              TF1 = 0;                //Clear interrupt flag
 508   2                              if(Timer1_itrp_count > TIMER1_ITRP_THRESHOLD)
 509   2                              {
 510   3                                      Timer1_itrp_count = 0;
 511   3                                      pwm3_flag = 1;  //Set flag
 512   3                                      PWM3 = 1;       //Set PWM o/p pin
 513   3                              }
 514   2                              return;         //Return
 515   2              }
 516   1              else
 517   1              {       //Start of Low level
 518   2      
 519   2      //              TH1 = (0xFFFF-PWM3_LowLevelCount)>>8;   //Load timer
 520   2      //              TL1 = (0xFFFF-PWM3_LowLevelCount);
 521   2                      TH1 = TH1_low_pre;
 522   2                      TL1 = TL1_low_pre;
 523   2                      TF1 = 0;        //Clear Interrupt flag
 524   2                      if(Timer1_itrp_count > TIMER1_ITRP_THRESHOLD)
 525   2                      {
 526   3                              Timer1_itrp_count = 0;
 527   3                              pwm3_flag = 0;  //Clear flag
 528   3                              PWM3 = 0;       //Set PWM o/p pin
 529   3                      }
 530   2                      return;         //return
 531   2              }
 532   1              TF1 = 0;                //Clear interrupt flag
 533   1              SFRPAGE = SFRPAGE_SAVE;
 534   1      }
 535          //-----------------------------------------------------------------------------
 536          // End Of File
 537          //-----------------------------------------------------------------------------
*** WARNING C294 IN LINE 202 OF main.c: unreachable code
*** WARNING C294 IN LINE 208 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1537    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =    111       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   MAIN                                                              11/15/2015 16:25:53 PAGE 10  

   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
