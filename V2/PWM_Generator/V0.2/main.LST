C51 COMPILER V9.53.0.0   MAIN                                                              12/10/2015 20:13:52 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F12x_UART0_Interrupt.c
   3          //-----------------------------------------------------------------------------
   4          // ????????????? RJ ?? ???????
   5          // ???????:     http://dadastudio.taobao.com/ 
   6          // ????????      C8051F12x-13x???.pdf ?? 21 ?:UART0
   7          //
   8          // Copyright 2006 Silicon Laboratories, Inc.
   9          // http://www.silabs.com
  10          //
  11          // Program Description:
  12          //
  13          // This program demonstrates how to configure the C8051F120 to write to and read 
  14          // from the UART interface. The program reads a word using the UART0 interrupts 
  15          // and outputs that word to the screen, with all characters in uppercase
  16          //
  17          // How To Test:
  18          //
  19          // 1) Download code to a 'F12x device that is connected to a UART transceiver
  20          // 2) Verify jumpers J6 and J9 are populated on the 'F12x TB.
  21          // 3) Connect serial cable from the transceiver to a PC
  22          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  23          //    to the COM port at <BAUDRATE> and 8-N-1
  24          // 5) Download and execute code on an 'F12x target board.
  25          // 6) Type up to 64 characters into the Terminal and press Enter.  The MCU 
  26          //    will then print back the characters that were typed
  27          //   
  28          //
  29          // Target:         C8051F12x
  30          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  31          // Command Line:   None
  32          //
  33          // Release 1.0
  34          //    -Initial Revision (SM)
  35          //    -11 JULY 2007
  36          //
  37          
  38          
  39          //-----------------------------------------------------------------------------
  40          // Includes
  41          //-----------------------------------------------------------------------------
  42          
  43          #include <c8051f120.h>                 // SFR declarations
  44          #include <stdio.h>                     
  45          #include <string.h>
  46          //-----------------------------------------------------------------------------
  47          // 16-bit SFR Definitions for 'F12x
  48          //-----------------------------------------------------------------------------
  49          
  50          sfr16 RCAP2    = 0xca;                 // Timer2 capture/reload
  51          sfr16 TMR2     = 0xcc;                 // Timer2
  52          
  53          //-----------------------------------------------------------------------------
  54          // Global Constants
  55          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   MAIN                                                              12/10/2015 20:13:52 PAGE 2   

  56          
  57          #define BAUDRATE     9600            // Baud rate of UART in bps
  58          
  59          // SYSTEMCLOCK = System clock frequency in Hz
  60          #define SYSTEMCLOCK       (22118400L * 9 / 4)
  61          
  62          //-----------------------------------------------------------------------------
  63          // Function Prototypes
  64          //-----------------------------------------------------------------------------
  65          
  66          void OSCILLATOR_Init (void);         
  67          void PORT_Init (void);
  68          void UART0_Init (void);
  69          void RerangeTheBufferQueue(void);
  70          void WirelessModule_Init(void);
  71          void Uart0_SendByte(unsigned char value);
  72          void TIMER0_Init(unsigned int count);
  73          void TIMER1_Init(unsigned int count);
  74          void Ext_Interrupt_Init (void);
  75          
  76          //-----------------------------------------------------------------------------
  77          // Global Variables
  78          //-----------------------------------------------------------------------------
  79          
  80          #define UART_BUFFERSIZE 64
  81          unsigned char UART_Buffer_Queue[UART_BUFFERSIZE];
  82          unsigned char * UART_Buffer_QueueHead=UART_Buffer_Queue;
  83          unsigned char * UART_Buffer_QueueBottom=UART_Buffer_Queue;
  84          unsigned char TX_Ready =1;
  85          static char Byte;
  86          char TxOrder = 0;
  87          unsigned char TxByte = 0;
  88          //----------------------PWM----------------------------------------------------
  89          #define MOTOR_SPEED_DEGREE = 16;
  90          //unsigned int Motor_speed_degree[16][
  91          float PWM1_HighLevelPercent = 0.1;
  92          float PWM3_HighLevelPercent = 0.1;
  93          sbit PWM1       =       P4^4;                      
  94          sbit PWM3   =   P3^4;
  95          bit pwm1_flag=0;
  96          bit pwm3_flag=0;
  97          unsigned char INT01_Flag = 0;
  98          unsigned int PWM1_HighLevelCount=0;
  99          unsigned int PWM1_LowLevelCount=0;
 100          unsigned int PWM3_HighLevelCount=0;
 101          unsigned int PWM3_LowLevelCount=0;
 102          unsigned char PWM_Degree_uc = 0;
 103          //---------------------------Timer---------------------------------------------
 104          unsigned int TH0_high_pre =  0;
 105          unsigned int TL0_high_pre =  0;
 106          unsigned int TH0_low_pre =  0;
 107          unsigned int TL0_low_pre =  0;
 108          
 109          unsigned int TH1_high_pre =  0;
 110          unsigned int TL1_high_pre =  0;
 111          unsigned int TH1_low_pre =  0;
 112          unsigned int TL1_low_pre =  0;
 113          int count = 0;
 114          //-----------------------------------------------------------------------------
 115          // main() Routine
 116          //-----------------------------------------------------------------------------
 117          
C51 COMPILER V9.53.0.0   MAIN                                                              12/10/2015 20:13:52 PAGE 3   

 118          void main (void)
 119          {
 120   1              
 121   1              SFRPAGE = CONFIG_PAGE;
 122   1      
 123   1              WDTCN = 0xDE;                       // Disable watchdog timer
 124   1              WDTCN = 0xAD;
 125   1      
 126   1              OSCILLATOR_Init ();                 // Initialize oscillator
 127   1              PORT_Init ();                       // Initialize crossbar and GPIO
 128   1              TIMER0_Init(SYSTEMCLOCK/5000);
 129   1              TIMER1_Init(SYSTEMCLOCK/5000);
 130   1              Ext_Interrupt_Init();
 131   1      //   UART0_Init ();                      // Initialize UART0
 132   1      //   WirelessModule_Init();
 133   1              EA = 1;
 134   1      
 135   1              count = SYSTEMCLOCK/5000;
 136   1      
 137   1      
 138   1         while (1)
 139   1         {
 140   2                  ;
 141   2         }
 142   1      }
 143          
 144          //-----------------------------------------------------------------------------
 145          // Initialization Subroutines
 146          //-----------------------------------------------------------------------------
 147          
 148          //-----------------------------------------------------------------------------
 149          // OSCILLATOR_Init
 150          //-----------------------------------------------------------------------------
 151          //
 152          // Return Value : None
 153          // Parameters   : None
 154          //
 155          // This function initializes the system clock to use the PLL as its clock
 156          // source, where the PLL multiplies the external 22.1184MHz crystal by 9/4.
 157          //
 158          //-----------------------------------------------------------------------------
 159          void OSCILLATOR_Init (void)
 160          {
 161   1         int i;                              // Software timer
 162   1      
 163   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 164   1      
 165   1         SFRPAGE = CONFIG_PAGE;              // Set SFR page
 166   1      
 167   1         OSCICN = 0x80;                      // Set internal oscillator to run
 168   1                                             // at its slowest frequency
 169   1      
 170   1         CLKSEL = 0x00;                      // Select the internal osc. as
 171   1                                             // the SYSTEMCLOCK source
 172   1      
 173   1         // Initialize external crystal oscillator to use 22.1184 MHz crystal
 174   1      
 175   1         OSCXCN = 0x67;                      // Enable external crystal osc.
 176   1         for (i=0; i < 256; i++);            // Wait at least 1ms
 177   1      
 178   1         while (!(OSCXCN & 0x80));           // Wait for crystal osc to settle
 179   1      
C51 COMPILER V9.53.0.0   MAIN                                                              12/10/2015 20:13:52 PAGE 4   

 180   1         SFRPAGE = LEGACY_PAGE;
 181   1         FLSCL |=  0x30;                     // Initially set FLASH read timing for
 182   1                                             // 100MHz SYSTEMCLOCK (most conservative
 183   1                                             // setting)
 184   1         if (SYSTEMCLOCK <= 25000000) {           
 185   2         // Set FLASH read timing for <=25MHz
 186   2            FLSCL &= ~0x30;
 187   2         } else if (SYSTEMCLOCK <= 50000000) {    
 188   2         // Set FLASH read timing for <=50MHz
 189   2            FLSCL &= ~0x20;
 190   2         } else if (SYSTEMCLOCK <= 75000000) {    
 191   2         // Set FLASH read timing for <=75MHz
 192   2            FLSCL &= ~0x10;
 193   2         } else {                            // set FLASH read timing for <=100MHz
 194   2            FLSCL &= ~0x00;
 195   2         }
 196   1      
 197   1         // Start PLL for 50MHz operation
 198   1         SFRPAGE = PLL0_PAGE;
 199   1         PLL0CN = 0x04;                      // Select EXTOSC as clk source
 200   1         PLL0CN |= 0x01;                     // Enable PLL power
 201   1         PLL0DIV = 0x04;                     // Divide by 4
 202   1         PLL0FLT &= ~0x0f;
 203   1         PLL0FLT |=  0x0f;                   // Set Loop Filt for (22/4)MHz input clock
 204   1         PLL0FLT &= ~0x30;                   // Set ICO for 30-60MHz
 205   1         PLL0FLT |=  0x10;
 206   1      
 207   1         PLL0MUL = 0x09;                     // Multiply by 9
 208   1      
 209   1         // wait at least 5us
 210   1         for (i = 0; i < 256; i++) ;
 211   1      
 212   1         PLL0CN |= 0x02;                     // Enable PLL
 213   1      
 214   1         while (PLL0CN & 0x10 == 0x00);      // Wait for PLL to lock
 215   1      
 216   1         SFRPAGE = CONFIG_PAGE;
 217   1      
 218   1         CLKSEL = 0x02;                      // Select PLL as SYSTEMCLOCK source
 219   1      
 220   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 221   1      }
 222          
 223          
 224          //-----------------------------------------------------------------------------
 225          // PORT_Init
 226          //-----------------------------------------------------------------------------
 227          //
 228          // Return Value : None
 229          // Parameters   : None
 230          //
 231          // This function configures the crossbar and GPIO ports.
 232          //
 233          // P0.0   digital   push-pull     UART TX
 234          // P0.1   digital   open-drain    UART RX
 235          //-----------------------------------------------------------------------------
 236          void PORT_Init (void)
 237          {
 238   1              char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 239   1      
 240   1              SFRPAGE = CONFIG_PAGE;              // Set SFR page
 241   1      
C51 COMPILER V9.53.0.0   MAIN                                                              12/10/2015 20:13:52 PAGE 5   

 242   1              XBR1     = 0x04 + 0x10;                         //Enable /INT0 and /INT1
 243   1              XBR2     = 0x40;                    // Enable crossbar and weak pull-up
 244   1                                             
 245   1      
 246   1              P1MDOUT |= 0x40;                    // Set P1.6(LED) to push-pull
 247   1              P3MDOUT |= 0x10;                                        // P3.4 is push-pull
 248   1              P4MDOUT |= 0x10;                                        // P4.4. is push-pull
 249   1              P5MDOUT = 0xFF;                                         // P5.x is push-pull
 250   1              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 251   1      }
 252          
 253          
 254          
 255          void TIMER0_Init(unsigned int count)
 256          {
 257   1      
 258   1              char data SFRPAGE_SAVE =SFRPAGE;
 259   1              PWM1_HighLevelCount = count * (1-PWM1_HighLevelPercent);
 260   1              PWM1_LowLevelCount = (float)count * PWM1_HighLevelPercent;
 261   1              SFRPAGE=TIMER01_PAGE;
 262   1              TCON &= ~0x30;//stop the timer0
 263   1              TMOD &= ~0x00;//Set the timer0 work in mode of hex
 264   1              TMOD |= 0x01;
 265   1              CKCON &= ~0x0F; //clear Timer0 part 
 266   1              CKCON |= 0x08;// use SysClk
 267   1              TR0 = 0;
 268   1              TH0 = count;
 269   1              TL0 = count;
 270   1              ET0 = 1;
 271   1              TR0 =1;
 272   1              SFRPAGE = SFRPAGE_SAVE;
 273   1      }
 274          void TIMER1_Init(unsigned int count)
 275          {
 276   1              char data SFRPAGE_SAVE =SFRPAGE;
 277   1              PWM3_HighLevelCount = count * (1-PWM3_HighLevelPercent);
 278   1              PWM3_LowLevelCount = (float)count * PWM3_HighLevelPercent;
 279   1              SFRPAGE=TIMER01_PAGE;
 280   1              TCON &= ~0xC0;//stop timer1 ,clear TF1
 281   1              
 282   1              TMOD &= ~0x30;//Set the timer1 work in mode of hex
 283   1              TMOD |= 0x10;
 284   1              CKCON |= 0x10;//Use System clock
 285   1              TR1 = 0;
 286   1              TH1 = count;
 287   1              TL1 = count;
 288   1              ET1 = 1;
 289   1              TR1 =1;
 290   1              SFRPAGE = SFRPAGE_SAVE;
 291   1      }
 292          //-----------------------------------------------------------------------------
 293          // Ext_Interrupt_Init
 294          //-----------------------------------------------------------------------------
 295          //
 296          // Return Value : None
 297          // Parameters   : None
 298          //
 299          // This function configures and enables /INT0 and /INT1 (External Interrupts)
 300          // as negative edge-triggered.
 301          //
 302          //-----------------------------------------------------------------------------
 303          void Ext_Interrupt_Init (void)
C51 COMPILER V9.53.0.0   MAIN                                                              12/10/2015 20:13:52 PAGE 6   

 304          {
 305   1         char SFRPAGE_SAVE = SFRPAGE;
 306   1      
 307   1         SFRPAGE = TIMER01_PAGE;
 308   1      
 309   1         TCON |= 0x05;                        // /INT 0 and /INT 1 are falling edge
 310   1                                             // triggered
 311   1      
 312   1         EX0 = 1;                            // Enable /INT0 interrupts
 313   1         EX1 = 1;                            // Enable /INT1 interrupts
 314   1      
 315   1         SFRPAGE = SFRPAGE_SAVE;
 316   1      }
 317          
 318          
 319          void Timer0_ISR(void) interrupt 1
 320          {
 321   1              char data SFRPAGE_SAVE =SFRPAGE;
 322   1              SFRPAGE=TIMER01_PAGE;
 323   1              
 324   1              if(!pwm1_flag)
 325   1              {
 326   2                      //Start of High level
 327   2                              pwm1_flag = 1;  //Set flag
 328   2                              SFRPAGE = CONFIG_PAGE;
 329   2                              PWM1 = 1;       //Set PWM o/p pin
 330   2                          SFRPAGE=TIMER01_PAGE;
 331   2      //                      TH0 = (0xFFFF-PWM1_HighLevelCount)>>8;  //Load timer
 332   2      //                      TL0 = (0xFFFF-PWM1_HighLevelCount);
 333   2                              TH0 = TH0_high_pre;
 334   2                              TL0 = TL0_high_pre;
 335   2                              TF0 = 0;                //Clear interrupt flag
 336   2                              return;         //Return
 337   2              }
 338   1              else
 339   1              {       //Start of Low level
 340   2                      pwm1_flag = 0;  //Clear flag
 341   2                      SFRPAGE = CONFIG_PAGE;
 342   2                      PWM1 = 0;       //Clear PWM o/p pin
 343   2                      SFRPAGE=TIMER01_PAGE;           
 344   2      //              TH0 = (0xFFFF-PWM1_LowLevelCount)>>8;   //Load timer
 345   2      //              TL0 = (0xFFFF-PWM1_LowLevelCount);
 346   2                      TH0 = TH0_low_pre;
 347   2                      TL0 = TL0_low_pre;
 348   2                      TF0 = 0;        //Clear Interrupt flag
 349   2                      return;         //return
 350   2              }
 351   1              SFRPAGE = SFRPAGE_SAVE;
 352   1      }
 353          void Timer1_ISR(void) interrupt 3
 354          {
 355   1              char data SFRPAGE_SAVE =SFRPAGE;
 356   1              SFRPAGE=TIMER01_PAGE;
 357   1              if(!pwm3_flag)
 358   1              {
 359   2                      //Start of High level
 360   2                              pwm3_flag = 1;  //Set flag
 361   2                              PWM3 = 1;       //Set PWM o/p pin
 362   2      //                      TH1 = (0xFFFF-PWM3_HighLevelCount)>>8;  //Load timer
 363   2      //                      TL1 = (0xFFFF-PWM3_HighLevelCount);
 364   2                              TH1 = TH1_high_pre;
 365   2                              TL1 = TL1_high_pre;
C51 COMPILER V9.53.0.0   MAIN                                                              12/10/2015 20:13:52 PAGE 7   

 366   2                              TF1 = 0;                //Clear interrupt flag
 367   2                              return;         //Return
 368   2              }
 369   1              else
 370   1              {       //Start of Low level
 371   2                      pwm3_flag = 0;  //Clear flag
 372   2                      PWM3 = 0;       //Set PWM o/p pin
 373   2      //              TH1 = (0xFFFF-PWM3_LowLevelCount)>>8;   //Load timer
 374   2      //              TL1 = (0xFFFF-PWM3_LowLevelCount);
 375   2                      TH1 = TH1_low_pre;
 376   2                      TL1 = TL1_low_pre;
 377   2                      TF1 = 0;        //Clear Interrupt flag
 378   2                      return;         //return
 379   2              }
 380   1              SFRPAGE = SFRPAGE_SAVE;
 381   1      }
 382          
 383          //-----------------------------------------------------------------------------
 384          // /INT0 ISR
 385          //-----------------------------------------------------------------------------
 386          //
 387          // Whenever a negative edge appears on P0.0, the LED is toggled.
 388          // The interrupt pending flag is automatically cleared by vectoring to the ISR
 389          //
 390          //-----------------------------------------------------------------------------
 391          void INT0_ISR (void) interrupt 0
 392          {
 393   1              char data SFRPAGE_SAVE =SFRPAGE;
 394   1              SFRPAGE = CONFIG_PAGE;
 395   1              PWM_Degree_uc = P5;
 396   1              SFRPAGE = SFRPAGE_SAVE;
 397   1              PWM1_HighLevelPercent = PWM_Degree_uc / 256.0;
 398   1              PWM1_HighLevelCount = count * (1-PWM1_HighLevelPercent);
 399   1              PWM1_LowLevelCount = (float)count * PWM1_HighLevelPercent;
 400   1              TH0_high_pre = (0xFFFF-PWM1_HighLevelCount)>>8;
 401   1              TL0_high_pre = (0xFFFF-PWM1_HighLevelCount);
 402   1              TH0_low_pre = (0xFFFF-PWM1_LowLevelCount)>>8;
 403   1              TL0_low_pre = (0xFFFF-PWM1_LowLevelCount);
 404   1      }
 405          
 406          //-----------------------------------------------------------------------------
 407          // /INT1 ISR
 408          //-----------------------------------------------------------------------------
 409          //
 410          // Whenever a negative edge appears on P0.1, the LED is toggled.
 411          // The interrupt pending flag is automatically cleared by vectoring to the ISR
 412          //
 413          //-----------------------------------------------------------------------------
 414          void INT1_ISR (void) interrupt 2
 415          {
 416   1              char data SFRPAGE_SAVE =SFRPAGE;
 417   1              SFRPAGE = CONFIG_PAGE;
 418   1              PWM_Degree_uc = P5;
 419   1              SFRPAGE = SFRPAGE_SAVE;
 420   1              PWM3_HighLevelPercent = PWM_Degree_uc / 256.0;
 421   1              PWM3_HighLevelCount = count * (1-PWM3_HighLevelPercent);
 422   1              PWM3_LowLevelCount = (float)count * PWM3_HighLevelPercent;
 423   1              TH1_high_pre = (0xFFFF-PWM3_HighLevelCount)>>8;
 424   1              TL1_high_pre = (0xFFFF-PWM3_HighLevelCount);
 425   1              TH1_low_pre = (0xFFFF-PWM3_LowLevelCount)>>8;   
 426   1              TL1_low_pre = (0xFFFF-PWM3_LowLevelCount);
 427   1      }
C51 COMPILER V9.53.0.0   MAIN                                                              12/10/2015 20:13:52 PAGE 8   

 428          //-----------------------------------------------------------------------------
 429          // End Of File
 430          //-----------------------------------------------------------------------------
*** WARNING C294 IN LINE 186 OF main.c: unreachable code
*** WARNING C294 IN LINE 192 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1131    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    110       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
