C51 COMPILER V9.53.0.0   MAIN                                                              07/23/2015 19:11:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F12x_UART0_Interrupt.c
   3          //-----------------------------------------------------------------------------
   4          // ????????????? RJ ?? ???????
   5          // ???????:     http://dadastudio.taobao.com/ 
   6          // ????????      C8051F12x-13x???.pdf ?? 21 ?:UART0
   7          //
   8          // Copyright 2006 Silicon Laboratories, Inc.
   9          // http://www.silabs.com
  10          //
  11          // Program Description:
  12          //
  13          // This program demonstrates how to configure the C8051F120 to write to and read 
  14          // from the UART interface. The program reads a word using the UART0 interrupts 
  15          // and outputs that word to the screen, with all characters in uppercase
  16          //
  17          // How To Test:
  18          //
  19          // 1) Download code to a 'F12x device that is connected to a UART transceiver
  20          // 2) Verify jumpers J6 and J9 are populated on the 'F12x TB.
  21          // 3) Connect serial cable from the transceiver to a PC
  22          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  23          //    to the COM port at <BAUDRATE> and 8-N-1
  24          // 5) Download and execute code on an 'F12x target board.
  25          // 6) Type up to 64 characters into the Terminal and press Enter.  The MCU 
  26          //    will then print back the characters that were typed
  27          //   
  28          //
  29          // Target:         C8051F12x
  30          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  31          // Command Line:   None
  32          //
  33          // Release 1.0
  34          //    -Initial Revision (SM)
  35          //    -11 JULY 2007
  36          //
  37          
  38          
  39          //-----------------------------------------------------------------------------
  40          // Includes
  41          //-----------------------------------------------------------------------------
  42          
  43          #include <c8051f120.h>                 // SFR declarations
  44          #include <stdio.h>                     
  45          #include <string.h>
  46          //-----------------------------------------------------------------------------
  47          // 16-bit SFR Definitions for 'F12x
  48          //-----------------------------------------------------------------------------
  49          
  50          sfr16 RCAP2    = 0xca;                 // Timer2 capture/reload
  51          sfr16 TMR2     = 0xcc;                 // Timer2
  52          
  53          //-----------------------------------------------------------------------------
  54          // Global Constants
  55          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   MAIN                                                              07/23/2015 19:11:02 PAGE 2   

  56          
  57          #define BAUDRATE     9600            // Baud rate of UART in bps
  58          
  59          // SYSTEMCLOCK = System clock frequency in Hz
  60          #define SYSTEMCLOCK       (22118400L * 9 / 4)
  61          
  62          //-----------------------------------------------------------------------------
  63          // Function Prototypes
  64          //-----------------------------------------------------------------------------
  65          
  66          void OSCILLATOR_Init (void);         
  67          void PORT_Init (void);
  68          void UART0_Init (void);
  69          void RerangeTheBufferQueue(void);
  70          void WirelessModule_Init(void);
  71          void Uart0_SendByte(unsigned char value);
  72          void TIMER0_Init(unsigned int count);
  73          void TIMER1_Init(unsigned int count);
  74          
  75          //-----------------------------------------------------------------------------
  76          // Global Variables
  77          //-----------------------------------------------------------------------------
  78          
  79          #define UART_BUFFERSIZE 64
  80          unsigned char UART_Buffer_Queue[UART_BUFFERSIZE];
  81          unsigned char * UART_Buffer_QueueHead=UART_Buffer_Queue;
  82          unsigned char * UART_Buffer_QueueBottom=UART_Buffer_Queue;
  83          unsigned char TX_Ready =1;
  84          static char Byte;
  85          //----------------------PWM----------------------------------------------------
  86          #define PWM1_HighLevelPercent 0.1
  87          #define PWM3_HighLevelPercent 0.1
  88          sbit PWM1       =       P3^2;                      
  89          sbit PWM3   =   P3^3;
  90          bit pwm1_flag=0;
  91          bit pwm3_flag=0;
  92          unsigned int PWM1_HighLevelCount=0;
  93          unsigned int PWM1_LowLevelCount=0;
  94          unsigned int PWM3_HighLevelCount=0;
  95          unsigned int PWM3_LowLevelCount=0;
  96          //-----------------------------------------------------------------------------
  97          // main() Routine
  98          //-----------------------------------------------------------------------------
  99          
 100          void main (void)
 101          {
 102   1           
 103   1         SFRPAGE = CONFIG_PAGE;
 104   1      
 105   1         WDTCN = 0xDE;                       // Disable watchdog timer
 106   1         WDTCN = 0xAD;
 107   1      
 108   1         OSCILLATOR_Init ();                 // Initialize oscillator
 109   1         PORT_Init ();                       // Initialize crossbar and GPIO
 110   1              TIMER0_Init(SYSTEMCLOCK/2000);
 111   1              TIMER1_Init(SYSTEMCLOCK/2000);
 112   1      
 113   1         UART0_Init ();                      // Initialize UART0
 114   1         WirelessModule_Init();
 115   1         EA = 1;
 116   1      
 117   1         SFRPAGE = UART0_PAGE;   
C51 COMPILER V9.53.0.0   MAIN                                                              07/23/2015 19:11:02 PAGE 3   

 118   1      
 119   1         while (1)
 120   1         {  
 121   2                      Uart0_SendByte('h');
 122   2         }
 123   1      }
 124          
 125          //-----------------------------------------------------------------------------
 126          // Initialization Subroutines
 127          //-----------------------------------------------------------------------------
 128          
 129          //-----------------------------------------------------------------------------
 130          // OSCILLATOR_Init
 131          //-----------------------------------------------------------------------------
 132          //
 133          // Return Value : None
 134          // Parameters   : None
 135          //
 136          // This function initializes the system clock to use the PLL as its clock
 137          // source, where the PLL multiplies the external 22.1184MHz crystal by 9/4.
 138          //
 139          //-----------------------------------------------------------------------------
 140          void OSCILLATOR_Init (void)
 141          {
 142   1         int i;                              // Software timer
 143   1      
 144   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 145   1      
 146   1         SFRPAGE = CONFIG_PAGE;              // Set SFR page
 147   1      
 148   1         OSCICN = 0x80;                      // Set internal oscillator to run
 149   1                                             // at its slowest frequency
 150   1      
 151   1         CLKSEL = 0x00;                      // Select the internal osc. as
 152   1                                             // the SYSTEMCLOCK source
 153   1      
 154   1         // Initialize external crystal oscillator to use 22.1184 MHz crystal
 155   1      
 156   1         OSCXCN = 0x67;                      // Enable external crystal osc.
 157   1         for (i=0; i < 256; i++);            // Wait at least 1ms
 158   1      
 159   1         while (!(OSCXCN & 0x80));           // Wait for crystal osc to settle
 160   1      
 161   1         SFRPAGE = LEGACY_PAGE;
 162   1         FLSCL |=  0x30;                     // Initially set FLASH read timing for
 163   1                                             // 100MHz SYSTEMCLOCK (most conservative
 164   1                                             // setting)
 165   1         if (SYSTEMCLOCK <= 25000000) {           
 166   2         // Set FLASH read timing for <=25MHz
 167   2            FLSCL &= ~0x30;
 168   2         } else if (SYSTEMCLOCK <= 50000000) {    
 169   2         // Set FLASH read timing for <=50MHz
 170   2            FLSCL &= ~0x20;
 171   2         } else if (SYSTEMCLOCK <= 75000000) {    
 172   2         // Set FLASH read timing for <=75MHz
 173   2            FLSCL &= ~0x10;
 174   2         } else {                            // set FLASH read timing for <=100MHz
 175   2            FLSCL &= ~0x00;
 176   2         }
 177   1      
 178   1         // Start PLL for 50MHz operation
 179   1         SFRPAGE = PLL0_PAGE;
C51 COMPILER V9.53.0.0   MAIN                                                              07/23/2015 19:11:02 PAGE 4   

 180   1         PLL0CN = 0x04;                      // Select EXTOSC as clk source
 181   1         PLL0CN |= 0x01;                     // Enable PLL power
 182   1         PLL0DIV = 0x04;                     // Divide by 4
 183   1         PLL0FLT &= ~0x0f;
 184   1         PLL0FLT |=  0x0f;                   // Set Loop Filt for (22/4)MHz input clock
 185   1         PLL0FLT &= ~0x30;                   // Set ICO for 30-60MHz
 186   1         PLL0FLT |=  0x10;
 187   1      
 188   1         PLL0MUL = 0x09;                     // Multiply by 9
 189   1      
 190   1         // wait at least 5us
 191   1         for (i = 0; i < 256; i++) ;
 192   1      
 193   1         PLL0CN |= 0x02;                     // Enable PLL
 194   1      
 195   1         while (PLL0CN & 0x10 == 0x00);      // Wait for PLL to lock
 196   1      
 197   1         SFRPAGE = CONFIG_PAGE;
 198   1      
 199   1         CLKSEL = 0x02;                      // Select PLL as SYSTEMCLOCK source
 200   1      
 201   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 202   1      }
 203          
 204          
 205          //-----------------------------------------------------------------------------
 206          // PORT_Init
 207          //-----------------------------------------------------------------------------
 208          //
 209          // Return Value : None
 210          // Parameters   : None
 211          //
 212          // This function configures the crossbar and GPIO ports.
 213          //
 214          // P0.0   digital   push-pull     UART TX
 215          // P0.1   digital   open-drain    UART RX
 216          //-----------------------------------------------------------------------------
 217          void PORT_Init (void)
 218          {
 219   1              char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 220   1      
 221   1              SFRPAGE = CONFIG_PAGE;              // Set SFR page
 222   1      
 223   1              XBR0     = 0x04;                    // Enable UART0
 224   1              XBR1     = 0x00;
 225   1              XBR2     = 0x40;                    // Enable crossbar and weak pull-up
 226   1                                             
 227   1      
 228   1              P0MDOUT |= 0x01;                    // Set TX pin to push-pull
 229   1              P1MDOUT |= 0x40;                    // Set P1.6(LED) to push-pull
 230   1              P3MDOUT = 0xFF;                                         // P3.x is open-drain
 231   1              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 232   1      }
 233          
 234          
 235          //-----------------------------------------------------------------------------
 236          // UART0_Init   Variable baud rate, Timer 2, 8-N-1
 237          //-----------------------------------------------------------------------------
 238          //
 239          // Return Value : None
 240          // Parameters   : None
 241          //
C51 COMPILER V9.53.0.0   MAIN                                                              07/23/2015 19:11:02 PAGE 5   

 242          // Configure UART0 for operation at <baudrate> 8-N-1 using Timer2 as
 243          // baud rate source.
 244          //
 245          //-----------------------------------------------------------------------------
 246          void UART0_Init (void)
 247          {
 248   1         char SFRPAGE_SAVE;
 249   1      
 250   1         SFRPAGE_SAVE = SFRPAGE;             // Preserve SFRPAGE
 251   1      
 252   1         SFRPAGE = TMR2_PAGE;
 253   1      
 254   1         TMR2CN = 0x00;                      // Timer in 16-bit auto-reload up timer
 255   1                                             // mode
 256   1         TMR2CF = 0x08;                      // SYSCLK is time base; no output;
 257   1                                             // up count only
 258   1         RCAP2 = - ((long) SYSTEMCLOCK/BAUDRATE/16);
 259   1         TMR2 = RCAP2;
 260   1         TR2= 1;                             // Start Timer2
 261   1      
 262   1         SFRPAGE = UART0_PAGE;
 263   1      
 264   1         SCON0 = 0x50;                       // 8-bit variable baud rate;
 265   1                                             // 9th bit ignored; RX enabled
 266   1                                             // clear all flags
 267   1         SSTA0 = 0x15;                       // Clear all flags; enable baud rate
 268   1                                             // doubler (not relevant for these
 269   1                                             // timers);
 270   1                                             // Use Timer2 as RX and TX baud rate
 271   1                                             // source;
 272   1         ES0 = 1;  
 273   1         IP |= 0x10;
 274   1      
 275   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 276   1      }
 277          
 278          
 279          //-----------------------------------------------------------------------------
 280          // Interrupt Service Routines
 281          //-----------------------------------------------------------------------------
 282          
 283          //-----------------------------------------------------------------------------
 284          // UART0_Interrupt
 285          //-----------------------------------------------------------------------------
 286          //
 287          // This routine is invoked whenever a character is entered or displayed on the
 288          // Hyperterminal.
 289          //
 290          //-----------------------------------------------------------------------------
 291          
 292          void UART0_Interrupt (void) interrupt 4
 293          {
 294   1         SFRPAGE = UART0_PAGE;
 295   1      
 296   1         if ( RI0 == 1 && (UART_Buffer_QueueBottom-UART_Buffer_Queue) < UART_BUFFERSIZE ) //if the buffer is not
             - full
 297   1         {
 298   2            RI0 = 0;                           // Clear interrupt flag
 299   2            Byte = SBUF0;                      // Read a character from UART
 300   2      
 301   2            if ( UART_Buffer_QueueBottom < (UART_Buffer_Queue+UART_BUFFERSIZE) )
 302   2            {
C51 COMPILER V9.53.0.0   MAIN                                                              07/23/2015 19:11:02 PAGE 6   

 303   3                              *UART_Buffer_QueueBottom = Byte; // Store in array
 304   3                              UART_Buffer_QueueBottom++;
 305   3                              if( UART_Buffer_QueueBottom >= (UART_Buffer_Queue+UART_BUFFERSIZE) )
 306   3                                      RerangeTheBufferQueue();
 307   3            }
 308   2                else
 309   2                        RerangeTheBufferQueue();
 310   2         }
 311   1      
 312   1         if (TI0 == 1)                   // Check if transmit flag is set
 313   1         {
 314   2            TI0 = 0;                           // Clear interrupt flag
 315   2      
 316   2            TX_Ready = 1;                    // Indicate transmission complete
 317   2           
 318   2         }
 319   1      }
 320          
 321          //-----------------------------------------------------------------------------
 322          // RerangeTheBufferQueue
 323          //-----------------------------------------------------------------------------
 324          //
 325          // This routine is invoked to rerange the UART buffer queue when the bottom point has get to the bottom li
             -mit
 326          //-----------------------------------------------------------------------------
 327          void RerangeTheBufferQueue(void)
 328          {
 329   1                      int count = UART_Buffer_QueueBottom-UART_Buffer_QueueHead;
 330   1                      int i=0;
 331   1                      for(i=0;i<count;i++)
 332   1                      {
 333   2                                      *(UART_Buffer_Queue+i)= UART_Buffer_QueueHead;
*** WARNING C260 IN LINE 333 OF main.c: '=': pointer truncation
 334   2                                      UART_Buffer_QueueHead++;
 335   2                                      
 336   2                      }
 337   1                      UART_Buffer_QueueHead=UART_Buffer_Queue;
 338   1                      UART_Buffer_QueueBottom=UART_Buffer_QueueHead+count;
 339   1      }
 340          //-----------------------------------------------------------------------------
 341          // WirelessModule_Init
 342          //-----------------------------------------------------------------------------
 343          //
 344          //-----------------------------------------------------------------------------
 345          void WirelessModule_Init(void)
 346          {
 347   1              P3 = 0xFF; // Enter the SET mode of the wireless module
 348   1              strcat(UART_Buffer_Queue,"helloworld");
 349   1              UART_Buffer_QueueBottom += strlen("helloworld");
 350   1      }
 351          //-----------------------------------------------------------------------------
 352          // Uart0_SendByte
 353          //-----------------------------------------------------------------------------
 354          //
 355          //-----------------------------------------------------------------------------
 356          void Uart0_SendByte(unsigned char value)
 357          {
 358   1              char data SFRPAGE_SAVE = SFRPAGE;//save current SFR page
 359   1              SFRPAGE = UART0_PAGE;
 360   1              
 361   1              while(!TX_Ready);
 362   1              TX_Ready = 0;
C51 COMPILER V9.53.0.0   MAIN                                                              07/23/2015 19:11:02 PAGE 7   

 363   1              SBUF0 = value;
 364   1              
 365   1              
 366   1              SFRPAGE = SFRPAGE_SAVE;//Recover the SFR Page
 367   1      }
 368          void TIMER0_Init(unsigned int count)
 369          {
 370   1      
 371   1              char data SFRPAGE_SAVE =SFRPAGE;
 372   1              PWM1_HighLevelCount = count * (1-PWM1_HighLevelPercent);
 373   1              PWM1_LowLevelCount = (float)count * PWM1_HighLevelPercent;
 374   1              SFRPAGE=TIMER01_PAGE;
 375   1              TCON &= ~0x30;//stop the timer0
 376   1              TMOD &= ~0x00;//Set the timer0 work in mode of hex
 377   1              TMOD |= 0x01;
 378   1              CKCON = 0X08;
 379   1              TR0 = 0;
 380   1              TH0 = count;
 381   1              TL0 = count;
 382   1              ET0 = 1;
 383   1              TR0 =1;
 384   1              SFRPAGE = SFRPAGE_SAVE;
 385   1      }
 386          void TIMER1_Init(unsigned int count)
 387          {
 388   1              char data SFRPAGE_SAVE =SFRPAGE;
 389   1              PWM3_HighLevelCount = count * (1-PWM3_HighLevelPercent);
 390   1              PWM3_LowLevelCount = (float)count * PWM3_HighLevelPercent;
 391   1              SFRPAGE=TIMER01_PAGE;
 392   1              TCON &= ~0xC0;//stop timer1 ,clear TF1
 393   1              
 394   1              TMOD &= ~0x30;//Set the timer1 work in mode of hex
 395   1              TMOD |= 0x10;
 396   1              
 397   1              CKCON |= 0x10;
 398   1              TR1 = 0;
 399   1              TH1 = count;
 400   1              TL1 = count;
 401   1              ET1 = 1;
 402   1              TR1 =1;
 403   1              SFRPAGE = SFRPAGE_SAVE;
 404   1      }
 405          void Timer0_ISR(void) interrupt 1
 406          {
 407   1              if(!pwm1_flag)
 408   1              {
 409   2                      //Start of High level
 410   2                              pwm1_flag = 1;  //Set flag
 411   2                              PWM1 = 1;       //Set PWM o/p pin
 412   2                              TH0 = (0xFFFF-PWM1_HighLevelCount)>>8;  //Load timer
 413   2                              TL0 = (0xFFFF-PWM1_HighLevelCount);
 414   2                              TF0 = 0;                //Clear interrupt flag
 415   2                              return;         //Return
 416   2              }
 417   1              else
 418   1              {       //Start of Low level
 419   2                      pwm1_flag = 0;  //Clear flag
 420   2                      PWM1 = 0;       //Clear PWM o/p pin
 421   2                      TH0 = (0xFFFF-PWM1_LowLevelCount)>>8;   //Load timer
 422   2                      TL0 = (0xFFFF-PWM1_LowLevelCount);
 423   2                      TF0 = 0;        //Clear Interrupt flag
 424   2                      return;         //return
C51 COMPILER V9.53.0.0   MAIN                                                              07/23/2015 19:11:02 PAGE 8   

 425   2              }
 426   1      }
 427          void Timer1_ISR(void) interrupt 3
 428          {
 429   1              if(!pwm3_flag)
 430   1              {
 431   2                      //Start of High level
 432   2                              pwm3_flag = 1;  //Set flag
 433   2                              PWM3 = 1;       //Set PWM o/p pin
 434   2                              TH1 = (0xFFFF-PWM3_HighLevelCount)>>8;  //Load timer
 435   2                              TL1 = (0xFFFF-PWM3_HighLevelCount);
 436   2                              TF1 = 0;                //Clear interrupt flag
 437   2                              return;         //Return
 438   2              }
 439   1              else
 440   1              {       //Start of Low level
 441   2                      pwm3_flag = 0;  //Clear flag
 442   2                      PWM3 = 0;       //Clear PWM o/p pin
 443   2                      TH1 = (0xFFFF-PWM3_LowLevelCount)>>8;   //Load timer
 444   2                      TL1 = (0xFFFF-PWM3_LowLevelCount);
 445   2                      TF1 = 0;        //Clear Interrupt flag
 446   2                      return;         //return
 447   2              }
 448   1      }
 449          //-----------------------------------------------------------------------------
 450          // End Of File
 451          //-----------------------------------------------------------------------------
*** WARNING C294 IN LINE 167 OF main.c: unreachable code
*** WARNING C294 IN LINE 173 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    787    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     80       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
